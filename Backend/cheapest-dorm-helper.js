// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏≤‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡∏π‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î

// Helper: ‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö rule-based ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡∏π‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
function answerCheapestDormQuery(message, dorms) {
  const msg = message.toLowerCase();
  
  // ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏≤‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡∏π‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
  if (/‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡∏π‡∏Å|‡∏ñ‡∏π‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î|‡∏ñ‡∏π‡∏Å‡∏™‡∏∏‡∏î|‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥|‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ô‡πâ‡∏≠‡∏¢/.test(msg) && /‡∏´‡∏≠/.test(msg)) {
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å‡∏ñ‡∏π‡∏Å‡πÑ‡∏õ‡πÅ‡∏û‡∏á (‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å)
    const sortedDorms = [...dorms].sort((a, b) => {
      // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö (‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô)
      const getComparablePrice = (dorm) => {
        const monthly = dorm.price_monthly && Number(dorm.price_monthly) > 0 ? Number(dorm.price_monthly) : null;
        const daily = dorm.price_daily && Number(dorm.price_daily) > 0 ? Number(dorm.price_daily) * 30 : null; // ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
        
        // ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô*30
        return monthly || daily || Infinity;
      };
      
      const priceA = getComparablePrice(a);
      const priceB = getComparablePrice(b);
      
      return priceA - priceB;
    });

    const cheapestDorms = sortedDorms.slice(0, 3).filter(d => {
      // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
      const hasMonthly = d.price_monthly && Number(d.price_monthly) > 0;
      const hasDaily = d.price_daily && Number(d.price_daily) > 0;
      return hasMonthly || hasDaily;
    });

    if (cheapestDorms.length > 0) {
      let response = `üè† ‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡∏π‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î 3 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å:\n\n`;
      
      cheapestDorms.forEach((dorm, index) => {
        const prices = [];
        // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏•‡∏∞‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0
        if (dorm.price_daily && Number(dorm.price_daily) > 0) {
          prices.push(`‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô ‡∏ø${Number(dorm.price_daily).toLocaleString()}`);
        }
        if (dorm.price_monthly && Number(dorm.price_monthly) > 0) {
          prices.push(`‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏ø${Number(dorm.price_monthly).toLocaleString()}`);
        }
        if (dorm.price_term && Number(dorm.price_term) > 0) {
          prices.push(`‡∏£‡∏≤‡∏¢‡πÄ‡∏ó‡∏≠‡∏° ‡∏ø${Number(dorm.price_term).toLocaleString()}`);
        }
        
        response += `${index + 1}. **${dorm.name}**\n`;
        response += `   üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤: ${prices.join(' | ')}\n`;
        if (dorm.near_places) response += `   üìç ‡πÉ‡∏Å‡∏•‡πâ: ${dorm.near_places}\n`;
        if (dorm.contact_phone) response += `   üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠: ${dorm.contact_phone}\n`;
        response += `\n`;
      });
      
      response += `üí° ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏ñ‡∏π‡∏Å‡πÑ‡∏õ‡πÅ‡∏û‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô√ó30)`;
      return response;
    }
  }
  
  return null; // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡∏π‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
}

module.exports = { answerCheapestDormQuery };
