/*
===============================================================================
                            SMART DORM BACKEND SERVER
===============================================================================
Description: Backend API server for Smart Dorm management system
Author: Smart Dorm Development Team
Version: 1.0.0
Created: 2025
===============================================================================
*/

// ==================== DEPENDENCIES & IMPORTS ====================
const express = require('express');
const AWS = require('aws-sdk');
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const mysql = require('mysql2');
const cors = require('cors');
const bcrypt = require('bcrypt');
const http = require('http');
const socketio = require('socket.io');
const jwt = require('jsonwebtoken');
const axios = require('axios');
const { answerCheapestDormQuery } = require('./cheapest-dorm-helper');

// ‡πÇ‡∏´‡∏•‡∏î .env file ‡∏î‡πâ‡∏ß‡∏¢ absolute path ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à
require('dotenv').config({ path: require('path').join(__dirname, '.env') });

// Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö GROQ_API_KEY
console.log('üîë GROQ_API_KEY loaded:', process.env.GROQ_API_KEY ? 'YES ‚úÖ' : 'NO ‚ùå');
if (process.env.GROQ_API_KEY) {
  console.log('üîë API Key length:', process.env.GROQ_API_KEY.length);
  console.log('üîë API Key preview:', process.env.GROQ_API_KEY.substring(0, 10) + '...');
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≠‡∏á‡∏à‡∏∏‡∏î (Haversine formula)
function calculateDistance(lat1, lon1, lat2, lon2) {
  const R = 6371; // ‡∏£‡∏±‡∏®‡∏°‡∏µ‡πÇ‡∏•‡∏Å‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLon = (lon2 - lon1) * Math.PI / 180;
  const a = 
    Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
    Math.sin(dLon/2) * Math.sin(dLon/2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  const distance = R * c;
  return Math.round(distance * 100) / 100; // ‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
function linkNearbyPlaces(dormId, dormLat, dormLon, nearPlacesString) {
  if (!nearPlacesString) return;
  
  const nearPlaces = nearPlacesString.split(',').map(place => place.trim()).filter(place => place);
  
  nearPlaces.forEach(placeName => {
    // ‡∏´‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const findPlaceSql = `
      SELECT id, latitude, longitude, location_type, location_name 
      FROM location_coordinates 
      WHERE location_name LIKE ? AND dorm_id IS NULL
      LIMIT 1
    `;
    
    pool.query(findPlaceSql, [`%${placeName}%`], (err, results) => {
      if (err) {
        console.error('Error finding place:', err);
        return;
      }
      
      if (results.length > 0) {
        const place = results[0];
        const distance = calculateDistance(dormLat, dormLon, place.latitude, place.longitude);
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
        const insertNearPlaceSql = `
          INSERT INTO location_coordinates 
          (dorm_id, location_type, location_name, latitude, longitude, distance_km, description) 
          VALUES (?, ?, ?, ?, ?, ?, ?)
        `;
        
        pool.query(insertNearPlaceSql, [
          dormId, 
          place.location_type, 
          place.location_name, 
          place.latitude, 
          place.longitude, 
          distance,
          `‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏´‡∏≠‡∏û‡∏±‡∏Å ${distance} ‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£`
        ], (insertErr) => {
          if (insertErr) {
            console.error('Error inserting nearby place:', insertErr);
          } else {
            console.log(`‚úÖ Linked ${place.location_name} to dorm ${dormId}, distance: ${distance} km`);
          }
        });
      } else {
        console.log(`‚ö†Ô∏è Place not found: ${placeName}`);
      }
    });
  });
}

// ==================== SERVER INITIALIZATION ====================
const app = express();
const server = http.createServer(app);
const io = socketio(server, { cors: { origin: '*' } });

// ==================== MIDDLEWARE CONFIGURATION ====================
app.use(cors());
app.use(express.json());

// Static file serving for uploaded images
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// ==================== HEALTH CHECK ENDPOINT ====================
/**
 * Health check endpoint to verify server status
 * @route GET /health
 * @returns {Object} Server status and timestamp
 */
app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    timestamp: new Date().toISOString(),
    chatbot: 'ready'
  });
});

// ================================================================================================
// 4. DATABASE CONFIGURATION
// ================================================================================================

/**
 * MySQL Connection Pool Configuration
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MySQL ‡πÅ‡∏ö‡∏ö Connection Pool ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏î‡∏µ
 */
const pool = mysql.createPool({
  host: process.env.DB_HOST || 'localhost',
  user: process.env.DB_USER || 'root',
  password: process.env.DB_PASSWORD || '',
  database: process.env.DB_DATABASE || 'efllll',
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0
});

/**
 * Test Database Connection
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
 */
pool.getConnection((err, connection) => {
  if (err) {
    console.error('‚ùå Error connecting to database:', err);
    return;
  }
  console.log('‚úÖ Connected to MySQL database');
  connection.release();
});

// ==================== FILE UPLOAD CONFIGURATION ====================
/**
 * Multer storage configuration for customer profile pictures
 * Handles file uploads to the uploads directory
 */
const profileStorage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, 'uploads/'); // Store in uploads folder
  },
  filename: function (req, file, cb) {
    // Generate filename using customer info from database
    pool.query('SELECT firstName, lastName FROM customers WHERE id = ?', [req.user.id], (err, results) => {
      if (err || results.length === 0) {
        // If error occurs, use id and timestamp
        const timestamp = Date.now();
        const ext = path.extname(file.originalname);
        cb(null, `customer_${req.user.id}_${timestamp}${ext}`);
      } else {
        const customer = results[0];
        const timestamp = Date.now();
        const ext = path.extname(file.originalname);
        // Use customer's real name
        const filename = `${customer.firstName}_${customer.lastName}_${timestamp}${ext}`;
        cb(null, filename);
      }
    });
  }
});

/**
 * Multer upload middleware for customer profile pictures
 * Includes file size and type validation
 */
const uploadProfile = multer({ 
  storage: profileStorage,
  limits: {
    fileSize: 5 * 1024 * 1024 // 5MB file size limit
  },
  fileFilter: function (req, file, cb) {
    // Only allow image files
    if (file.mimetype.startsWith('image/')) {
      cb(null, true);
    } else {
      cb(new Error('‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'), false);
    }
  }
});

/**
 * Multer storage configuration for owner profile pictures
 * Handles file uploads to the uploads directory
 */
const ownerProfileStorage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, 'uploads/'); // Store in uploads folder
  },
  filename: function (req, file, cb) {
    // Generate filename using owner info from database
    pool.query('SELECT firstName, lastName FROM owners WHERE id = ?', [req.user.id], (err, results) => {
      if (err || results.length === 0) {
        // If error occurs, use id and timestamp
        const timestamp = Date.now();
        const ext = path.extname(file.originalname);
        cb(null, `owner_${req.user.id}_${timestamp}${ext}`);
      } else {
        const owner = results[0];
        const timestamp = Date.now();
        const ext = path.extname(file.originalname);
        // Use owner's real name
        const filename = `${owner.firstName}_${owner.lastName}_${timestamp}${ext}`;
        cb(null, filename);
      }
    });
  }
});

/**
 * Multer upload middleware for owner profile pictures
 * Includes file size and type validation
 */
const uploadOwnerProfile = multer({ 
  storage: ownerProfileStorage,
  limits: {
    fileSize: 5 * 1024 * 1024 // 5MB file size limit
  },
  fileFilter: function (req, file, cb) {
    // Only allow image files
    if (file.mimetype.startsWith('image/')) {
      cb(null, true);
    } else {
      cb(new Error('‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'), false);
    }
  }
});

/**
 * Multer storage configuration for dorm images
 * Uses timestamp-based filename generation
 */
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, 'uploads/');
  },
  filename: function (req, file, cb) {
    cb(null, Date.now() + path.extname(file.originalname));
  }
});

/**
 * Multer upload middleware for dorm images
 * Includes file size and type validation
 */
const upload = multer({ 
  storage: storage,
  limits: {
    fileSize: 5 * 1024 * 1024 // 5MB file size limit
  },
  fileFilter: function (req, file, cb) {
    // Only allow image files
    if (file.mimetype.startsWith('image/')) {
      cb(null, true);
    } else {
      cb(new Error('‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'), false);
    }
  }
});

// ==================== DATABASE INITIALIZATION ====================
/**
 * Initialize database with required columns and tables
 * Checks and adds missing columns to existing tables
 */
function initializeDatabase() {
  // Check for avatar_url column in customers table
  const checkAvatarColumnSql = `
    SELECT COLUMN_NAME 
    FROM INFORMATION_SCHEMA.COLUMNS 
    WHERE TABLE_NAME = 'customers' 
    AND COLUMN_NAME = 'avatar_url' 
    AND TABLE_SCHEMA = ?
  `;
  
  pool.query(checkAvatarColumnSql, [process.env.DB_DATABASE], (err, results) => {
    if (err) {
      console.error('Error checking avatar_url column:', err);
      return;
    }
    
    if (results.length === 0) {
      const addColumnSql = `ALTER TABLE customers ADD COLUMN avatar_url VARCHAR(255) DEFAULT NULL`;
      
      pool.query(addColumnSql, (err) => {
        if (err) {
          console.error('Error adding avatar_url column:', err);
        } else {
          console.log('‚úÖ Added avatar_url column to customers table');
        }
      });
    } else {
      console.log('‚úÖ avatar_url column already exists');
    }
  });

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö status ‡πÅ‡∏•‡∏∞ reject_reason ‡πÉ‡∏ô dorms
  const checkDormColumnsSql = `
    SELECT COLUMN_NAME 
    FROM INFORMATION_SCHEMA.COLUMNS 
    WHERE TABLE_NAME = 'dorms' 
    AND COLUMN_NAME IN ('status', 'reject_reason', 'created_at', 'updated_at')
    AND TABLE_SCHEMA = ?
  `;
  
  pool.query(checkDormColumnsSql, [process.env.DB_DATABASE], (err, results) => {
    if (err) {
      console.error('Error checking dorms columns:', err);
      return;
    }
    
    const existingColumns = results.map(row => row.COLUMN_NAME);
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° status column
    if (!existingColumns.includes('status')) {
      const addStatusSql = `ALTER TABLE dorms ADD COLUMN status ENUM('pending', 'approved', 'rejected') DEFAULT 'pending'`;
      pool.query(addStatusSql, (err) => {
        if (err) {
          console.error('Error adding status column:', err);
        } else {
          console.log('‚úÖ Added status column to dorms table');
        }
      });
    } else {
      console.log('‚úÖ status column already exists');
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° reject_reason column
    if (!existingColumns.includes('reject_reason')) {
      const addRejectReasonSql = `ALTER TABLE dorms ADD COLUMN reject_reason TEXT DEFAULT NULL`;
      pool.query(addRejectReasonSql, (err) => {
        if (err) {
          console.error('Error adding reject_reason column:', err);
        } else {
          console.log('‚úÖ Added reject_reason column to dorms table');
        }
      });
    } else {
      console.log('‚úÖ reject_reason column already exists');
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° created_at column
    if (!existingColumns.includes('created_at')) {
      const addCreatedAtSql = `ALTER TABLE dorms ADD COLUMN created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP`;
      pool.query(addCreatedAtSql, (err) => {
        if (err) {
          console.error('Error adding created_at column:', err);
        } else {
          console.log('‚úÖ Added created_at column to dorms table');
        }
      });
    } else {
      console.log('‚úÖ created_at column already exists');
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° updated_at column
    if (!existingColumns.includes('updated_at')) {
      const addUpdatedAtSql = `ALTER TABLE dorms ADD COLUMN updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP`;
      pool.query(addUpdatedAtSql, (err) => {
        if (err) {
          console.error('Error adding updated_at column:', err);
        } else {
          console.log('‚úÖ Added updated_at column to dorms table');
        }
      });
    } else {
      console.log('‚úÖ updated_at column already exists');
    }
  });

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° zip_code column ‡πÉ‡∏ô owners table
  const checkOwnerZipCodeSql = `
    SELECT COLUMN_NAME 
    FROM INFORMATION_SCHEMA.COLUMNS 
    WHERE TABLE_NAME = 'owners' 
    AND COLUMN_NAME = 'zip_code'
    AND TABLE_SCHEMA = ?
  `;
  
  pool.query(checkOwnerZipCodeSql, [process.env.DB_DATABASE], (err, results) => {
    if (err) {
      console.error('Error checking zip_code column in owners:', err);
      return;
    }
    
    if (results.length === 0) {
      const addZipCodeSql = `ALTER TABLE owners ADD COLUMN zip_code VARCHAR(10) DEFAULT NULL`;
      
      pool.query(addZipCodeSql, (err) => {
        if (err) {
          console.error('Error adding zip_code column to owners:', err);
        } else {
          console.log('‚úÖ Added zip_code column to owners table');
        }
      });
    } else {
      console.log('‚úÖ zip_code column already exists in owners table');
    }
  });

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° profile_image column ‡πÉ‡∏ô owners table
  const checkOwnerProfileImageSql = `
    SELECT COLUMN_NAME 
    FROM INFORMATION_SCHEMA.COLUMNS 
    WHERE TABLE_NAME = 'owners' 
    AND COLUMN_NAME = 'profile_image'
    AND TABLE_SCHEMA = ?
  `;
  
  pool.query(checkOwnerProfileImageSql, [process.env.DB_DATABASE], (err, results) => {
    if (err) {
      console.error('Error checking profile_image column in owners:', err);
      return;
    }
    
    if (results.length === 0) {
      const addProfileImageSql = `ALTER TABLE owners ADD COLUMN profile_image VARCHAR(255) DEFAULT NULL`;
      
      pool.query(addProfileImageSql, (err) => {
        if (err) {
          console.error('Error adding profile_image column to owners:', err);
        } else {
          console.log('‚úÖ Added profile_image column to owners table');
        }
      });
    } else {
      console.log('‚úÖ profile_image column already exists in owners table');
    }
  });

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á reviews
  const checkReviewsTableSql = `
    SELECT TABLE_NAME 
    FROM INFORMATION_SCHEMA.TABLES 
    WHERE TABLE_NAME = 'reviews' 
    AND TABLE_SCHEMA = ?
  `;
  
  pool.query(checkReviewsTableSql, [process.env.DB_DATABASE], (err, results) => {
    if (err) {
      console.error('Error checking reviews table:', err);
      return;
    }
    
    if (results.length === 0) {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á reviews
      const createReviewsTableSql = `
        CREATE TABLE reviews (
          id INT AUTO_INCREMENT PRIMARY KEY,
          customer_id INT NOT NULL,
          dorm_id INT NOT NULL,
          rating INT NOT NULL CHECK (rating >= 1 AND rating <= 5),
          comment TEXT,
          cleanliness_rating INT CHECK (cleanliness_rating >= 1 AND cleanliness_rating <= 5),
          location_rating INT CHECK (location_rating >= 1 AND location_rating <= 5),
          value_rating INT CHECK (value_rating >= 1 AND value_rating <= 5),
          service_rating INT CHECK (service_rating >= 1 AND service_rating <= 5),
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
          FOREIGN KEY (customer_id) REFERENCES customers(id) ON DELETE CASCADE,
          FOREIGN KEY (dorm_id) REFERENCES dorms(id) ON DELETE CASCADE,
          UNIQUE KEY unique_customer_dorm (customer_id, dorm_id)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
      `;
      
      pool.query(createReviewsTableSql, (err) => {
        if (err) {
          console.error('Error creating reviews table:', err);
        } else {
          console.log('‚úÖ Created reviews table successfully');
        }
      });
    } else {
      console.log('‚úÖ reviews table already exists');
    }
  });
}

// Initialize database schema on server startup
initializeDatabase();

// ================================================================================================
// 5. AUTHENTICATION MIDDLEWARE
// ================================================================================================

/**
 * JWT Token Verification Middleware
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á JWT token ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏Å‡∏±‡∏ö request header
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 * @param {Function} next - Express next function
 */
function verifyToken(req, res, next) {
  const token = req.headers.authorization?.split(' ')[1];
  
  if (!token) {
    return res.status(401).json({ error: 'Unauthorized - No token provided' });
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'your_secret_key');
    req.user = decoded;
    next();
  } catch (err) {
    console.error('‚ùå Token verification error:', err);
    return res.status(401).json({ error: 'Invalid token' });
  }
}

/**
 * Admin Token Verification Middleware
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á JWT token ‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 * @param {Function} next - Express next function
 */
function verifyAdminToken(req, res, next) {
  const token = req.headers.authorization?.split(' ')[1];
  
  if (!token) {
    console.log('‚ùå No token provided');
    return res.status(401).json({ error: 'Unauthorized - No token provided' });
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'your_secret_key');
    console.log('‚úÖ Token decoded:', decoded);
    
    if (decoded.role !== 'admin') {
      console.log('‚ùå Not admin role:', decoded.role);
      return res.status(403).json({ error: 'Forbidden - Admin access required' });
    }
    
    req.user = decoded;
    next();
  } catch (err) {
    console.error('‚ùå Token verification error:', err.message);
    return res.status(401).json({ error: 'Invalid or expired token' });
  }
}

// ================================================================================================
// 6. API ENDPOINTS - AUTHENTICATION & REGISTRATION
// ================================================================================================

/**
 * User Registration Endpoint
 * ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö customer, owner, ‡πÅ‡∏•‡∏∞ admin
 * @route POST /register
 * @param {string} role - ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (customer/owner/admin)
 * @param {string} password - ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
 * @param {Object} data - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•
 */
app.post('/register', async (req, res) => {
  const { role, password, ...data } = req.body;
  
  if (!password) {
    return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô' });
  }

  try {
    const hash = await bcrypt.hash(password, 10);

    let sql = '';
    let values = [];

    // Customer registration
    if (role === 'customer') {
      sql = `INSERT INTO customers 
        (firstName, lastName, age, dob, houseNo, moo, soi, road, subdistrict, district, province, email, password, phone)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`;
      values = [
        data.firstName, data.lastName, data.age, data.dob, data.houseNo, data.moo, data.soi, data.road,
        data.subdistrict, data.district, data.province, data.email, hash, data.phone
      ];
    } 
    // Owner registration
    else if (role === 'owner') {
      sql = `INSERT INTO owners 
        (dormName, firstName, lastName, age, dob, houseNo, moo, soi, road, subdistrict, district, province, email, password, phone)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`;
      values = [
        data.dormName, data.firstName, data.lastName, data.age, data.dob, data.houseNo, data.moo, data.soi, data.road,
        data.subdistrict, data.district, data.province, data.email, hash, data.phone
      ];
    } 
    // Admin registration
    else if (role === 'admin') {
      sql = `INSERT INTO admins 
        (firstName, lastName, age, dob, houseNo, moo, soi, road, subdistrict, district, province, email, password, phone)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`;
      values = [
        data.firstName, data.lastName, data.age, data.dob, data.houseNo, data.moo, data.soi, data.road,
        data.subdistrict, data.district, data.province, data.email, hash, data.phone
      ];
    } else {
      return res.status(400).json({ error: 'Invalid role' });
    }

    pool.query(sql, values, (err, result) => {
      if (err) {
        if (err.code === 'ER_DUP_ENTRY') {
          return res.status(400).json({ error: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß' });
        }
        return res.status(500).json({ error: err.message });
      }
      res.json({ success: true, message: '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
    });
  } catch (err) {
    console.error('‚ùå Registration error:', err);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå' });
  }
});

// ================================================================================================
// 7. API ENDPOINTS - DORM MANAGEMENT
// ================================================================================================

/**
 * Get All Approved Dorms with Images
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
 * @route GET /dorms
 * @returns {Array} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
 */
app.get('/dorms', (req, res) => {
  const sql = `
    SELECT 
      dorms.*, 
      dorm_images.image_path,
      GROUP_CONCAT(
        CONCAT(lc.location_type, ':', lc.location_name, ':', lc.latitude, ':', lc.longitude, ':', IFNULL(lc.distance_km, '0'))
        ORDER BY lc.location_type, lc.distance_km SEPARATOR ';'
      ) AS location_coordinates
    FROM dorms
    LEFT JOIN dorm_images ON dorms.id = dorm_images.dorm_id
    LEFT JOIN location_coordinates lc ON dorms.id = lc.dorm_id
    WHERE dorms.status = 'approved'
    GROUP BY dorms.id, dorm_images.image_path
  `;
  
  pool.query(sql, (err, results) => {
    if (err) {
      console.error('‚ùå Error fetching dorms:', err);
      return res.status(500).json({ error: err.message });
    }
    
    // Group images and coordinates by dorm ID
    const dormMap = {};
    results.forEach(row => {
      if (!dormMap[row.id]) {
        dormMap[row.id] = { 
          ...row, 
          images: [],
          coordinates: []
        };
        
        // Parse location coordinates
        if (row.location_coordinates) {
          const coords = row.location_coordinates.split(';');
          dormMap[row.id].coordinates = coords.map(coord => {
            const [type, name, lat, lng, distance] = coord.split(':');
            return {
              location_type: type,
              location_name: name,
              latitude: parseFloat(lat),
              longitude: parseFloat(lng),
              distance_km: parseFloat(distance) || 0
            };
          });
        }
      }
      if (row.image_path) {
        dormMap[row.id].images.push(row.image_path);
      }
    });
    
    // Convert to array and remove image_path field
    const dorms = Object.values(dormMap).map(dorm => {
      delete dorm.image_path;
      return dorm;
    });
    
    res.json(dorms);
  });
});

/**
 * Get Single Dorm by ID
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≠‡∏û‡∏±‡∏Å‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡∏î‡πâ‡∏ß‡∏¢ ID
 * @route GET /dorms/:id
 * @returns {Object} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
 */
app.get('/dorms/:id', (req, res) => {
  const dormId = req.params.id;
  const sql = `
    SELECT 
      dorms.*, 
      GROUP_CONCAT(dorm_images.image_path) AS images,
      GROUP_CONCAT(
        CONCAT(lc.location_type, ':', lc.location_name, ':', lc.latitude, ':', lc.longitude, ':', IFNULL(lc.distance_km, '0'))
        ORDER BY lc.location_type, lc.distance_km SEPARATOR ';'
      ) AS location_coordinates
    FROM dorms
    LEFT JOIN dorm_images ON dorms.id = dorm_images.dorm_id
    LEFT JOIN location_coordinates lc ON dorms.id = lc.dorm_id
    WHERE dorms.id = ?
    GROUP BY dorms.id
  `;
  
  pool.query(sql, [dormId], (err, results) => {
    if (err) {
      console.error('Error fetching dorm:', err);
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≠‡∏û‡∏±‡∏Å' });
    }
    
    if (results.length === 0) {
      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≠‡∏û‡∏±‡∏Å' });
    }
    
    const dorm = results[0];
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô array
    if (dorm.images) {
      dorm.images = dorm.images.split(',').filter(img => img);
    } else {
      dorm.images = [];
    }
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
    if (dorm.location_coordinates) {
      dorm.coordinates = dorm.location_coordinates.split(';')
        .filter(coord => coord)
        .map(coord => {
          const [type, name, lat, lng, distance] = coord.split(':');
          return { type, name, latitude: parseFloat(lat), longitude: parseFloat(lng), distance: parseFloat(distance) || 0 };
        });
    } else {
      dorm.coordinates = [];
    }
    
    delete dorm.location_coordinates;
    res.json(dorm);
  });
});

/**
 * Delete Dorm
 * ‡∏•‡∏ö‡∏´‡∏≠‡∏û‡∏±‡∏Å (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠ Admin)
 * @route DELETE /dorms/:id
 */
app.delete('/dorms/:id', authOwner, (req, res) => {
  const dormId = req.params.id;
  const userId = req.user.id;
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const checkOwnerSql = 'SELECT id FROM dorms WHERE id = ? AND owner_id = ?';
  
  pool.query(checkOwnerSql, [dormId, userId], (err, results) => {
    if (err) {
      console.error('Error checking dorm ownership:', err);
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå' });
    }
    
    if (results.length === 0) {
      return res.status(403).json({ error: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏ö‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ô‡∏µ‡πâ' });
    }
    
    // ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô
    const deleteImagesSql = 'DELETE FROM dorm_images WHERE dorm_id = ?';
    pool.query(deleteImagesSql, [dormId], (err) => {
      if (err) {
        console.error('Error deleting dorm images:', err);
        return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û' });
      }
      
      // ‡∏•‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
      const deleteCoordsSql = 'DELETE FROM location_coordinates WHERE dorm_id = ?';
      pool.query(deleteCoordsSql, [dormId], (err) => {
        if (err) {
          console.error('Error deleting coordinates:', err);
        }
        
        // ‡∏•‡∏ö‡∏´‡∏≠‡∏û‡∏±‡∏Å
        const deleteDormSql = 'DELETE FROM dorms WHERE id = ?';
        pool.query(deleteDormSql, [dormId], (err, result) => {
          if (err) {
            console.error('Error deleting dorm:', err);
            return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡∏≠‡∏û‡∏±‡∏Å' });
          }
          
          if (result.affectedRows === 0) {
            return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö' });
          }
          
          broadcastDormsUpdate();
          res.json({ success: true, message: '‡∏•‡∏ö‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
        });
      });
    });
  });
});

/**
 * Get Owner's Dorms
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏Ñ‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡πÜ
 * @route GET /owner/dorms
 * @access Private (Owner only)
 * @returns {Array} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á
 */
app.get('/owner/dorms', authOwner, (req, res) => {
  const owner_id = req.user.id;
  const sql = `
    SELECT 
      dorms.*, 
      dorm_images.image_path,
      GROUP_CONCAT(
        CONCAT(lc.location_type, ':', lc.location_name, ':', lc.latitude, ':', lc.longitude, ':', IFNULL(lc.distance_km, '0'))
        ORDER BY lc.location_type, lc.distance_km SEPARATOR ';'
      ) AS location_coordinates
    FROM dorms
    LEFT JOIN dorm_images ON dorms.id = dorm_images.dorm_id
    LEFT JOIN location_coordinates lc ON dorms.id = lc.dorm_id
    WHERE dorms.owner_id = ?
    GROUP BY dorms.id, dorm_images.image_path
  `;
  
  pool.query(sql, [owner_id], (err, results) => {
    if (err) {
      console.error('‚ùå Error fetching owner dorms:', err);
      return res.status(500).json({ error: err.message });
    }
    
    // Group images and coordinates by dorm ID
    const dormMap = {};
    results.forEach(row => {
      if (!dormMap[row.id]) {
        dormMap[row.id] = { 
          ...row, 
          images: [],
          coordinates: []
        };
        
        // Parse location coordinates
        if (row.location_coordinates) {
          const coords = row.location_coordinates.split(';');
          dormMap[row.id].coordinates = coords.map(coord => {
            const [type, name, lat, lng, distance] = coord.split(':');
            return {
              location_type: type,
              location_name: name,
              latitude: parseFloat(lat),
              longitude: parseFloat(lng),
              distance_km: parseFloat(distance) || 0
            };
          });
        }
      }
      if (row.image_path) {
        dormMap[row.id].images.push(row.image_path);
      }
    });
    
    // Convert to array and remove temporary fields
    const dorms = Object.values(dormMap).map(dorm => {
      // ‡∏î‡∏∂‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏à‡∏≤‡∏Å coordinates array
      const dormLocation = dorm.coordinates.find(coord => coord.location_type === 'dorm_location');
      if (dormLocation) {
        dorm.latitude = dormLocation.latitude;
        dorm.longitude = dormLocation.longitude;
      }
      
      delete dorm.image_path;
      delete dorm.location_coordinates;
      return dorm;
    });
    
    res.json(dorms);
  });
});

// ================================================================================================
// 8. API ENDPOINTS - USER AUTHENTICATION
// ================================================================================================

/**
 * User Login Endpoint
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á JWT token ‡∏Å‡∏•‡∏±‡∏ö
 * @route POST /login
 * @param {string} email - ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 * @param {string} password - ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
 * @returns {Object} JWT token ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 */
app.post('/login', async (req, res) => {
  const { email, password } = req.body;

  if (!email || !password) {
    return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô' });
  }

  try {
    const poolPromise = pool.promise();

    // Function to check a table for a user
    const findUser = async (table, role) => {
      const [results] = await poolPromise.query(`SELECT * FROM ${table} WHERE email = ?`, [email]);
      if (results.length > 0) {
        const user = results[0];
        const match = await bcrypt.compare(password, user.password);
        if (match) {
          return user;
        }
      }
      return null;
    };

    // Check tables sequentially
    let user = await findUser('customers', 'customer');
    if (user) {
      const token = jwt.sign({ id: user.id, role: 'customer' }, process.env.JWT_SECRET || 'your_secret_key', { expiresIn: '1d' });
      console.log('Customer login successful:', { id: user.id, role: 'customer' });
      return res.json({ token, role: 'customer' });
    }

    user = await findUser('owners', 'owner');
    if (user) {
      const token = jwt.sign({ id: user.id, role: 'owner' }, process.env.JWT_SECRET || 'your_secret_key', { expiresIn: '1d' });
      console.log('Owner login successful:', { id: user.id, role: 'owner' });
      return res.json({ token, role: 'owner' });
    }

    user = await findUser('admins', 'admin');
    if (user) {
      const token = jwt.sign({ id: user.id, role: 'admin' }, process.env.JWT_SECRET || 'your_secret_key', { expiresIn: '1d' });
      console.log('Admin login successful:', { id: user.id, role: 'admin', email: user.email });
      return res.json({ token, role: 'admin' });
    }

    // If no user is found in any table
    return res.status(401).json({ error: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });

  } catch (err) {
    console.error('Login error:', err);
    return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
  }
});

// Broadcast event ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≠‡∏û‡∏±‡∏Å
function broadcastDormsUpdate() {
  io.emit('dorms-updated');
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏≠‡∏û‡∏±‡∏Å‡πÉ‡∏´‡∏°‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö) ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ
app.post('/dorms', upload.array('images', 10), (req, res) => {
  const { name, price_daily, price_monthly, price_term, floor_count, room_count, address_detail, water_cost, electricity_cost, deposit, contact_phone, facilities, near_places, latitude, longitude, owner_id } = req.body;
  const dormSql = 'INSERT INTO dorms (name, price_daily, price_monthly, price_term, floor_count, room_count, address_detail, water_cost, electricity_cost, deposit, contact_phone, facilities, near_places, owner_id, status) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';

  pool.query(dormSql, [name, price_daily, price_monthly, price_term, floor_count, room_count, address_detail, water_cost, electricity_cost, deposit, contact_phone, facilities, near_places, owner_id || null, 'pending'], (err, dormResult) => {
    if (err) return res.status(500).json({ error: err.message });
    const dormId = dormResult.insertId;
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if (latitude && longitude) {
      const coordinateSql = 'INSERT INTO location_coordinates (dorm_id, location_type, location_name, latitude, longitude) VALUES (?, ?, ?, ?, ?)';
      pool.query(coordinateSql, [dormId, 'dorm_location', name, latitude, longitude], (coordErr) => {
        if (coordErr) console.error('Error inserting dorm coordinates:', coordErr);
        
        // ‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
        linkNearbyPlaces(dormId, parseFloat(latitude), parseFloat(longitude), near_places);
      });
    }
    
    if (req.files && req.files.length > 0) {
      const imageValues = req.files.map(f => [dormId, '/uploads/' + f.filename]);
      pool.query('INSERT INTO dorm_images (dorm_id, image_path) VALUES ?', [imageValues], (imgErr) => {
        if (imgErr) return res.status(500).json({ error: imgErr.message });
        broadcastDormsUpdate();
        res.json({ success: true });
      });
    } else {
      broadcastDormsUpdate();
      res.json({ success: true });
    }
  });
});

app.post('/owner/dorms', authOwner, upload.array('images', 10), (req, res) => {
  const { name, price_daily, price_monthly, price_term, floor_count, room_count, address_detail, water_cost, electricity_cost, deposit, contact_phone, facilities, near_places, latitude, longitude } = req.body;
  const owner_id = req.user.id;
  const dormSql = 'INSERT INTO dorms (name, price_daily, price_monthly, price_term, floor_count, room_count, address_detail, water_cost, electricity_cost, deposit, contact_phone, facilities, near_places, owner_id, status) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';

  pool.query(dormSql, [name, price_daily, price_monthly, price_term, floor_count, room_count, address_detail, water_cost, electricity_cost, deposit, contact_phone, facilities, near_places, owner_id, 'pending'], (err, dormResult) => {
    if (err) return res.status(500).json({ error: err.message });
    const dormId = dormResult.insertId;
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if (latitude && longitude) {
      const coordinateSql = 'INSERT INTO location_coordinates (dorm_id, location_type, location_name, latitude, longitude) VALUES (?, ?, ?, ?, ?)';
      pool.query(coordinateSql, [dormId, 'dorm_location', name, latitude, longitude], (coordErr) => {
        if (coordErr) console.error('Error inserting dorm coordinates:', coordErr);
      });
    }
    
    if (req.files && req.files.length > 0) {
      const imageValues = req.files.map(f => [dormId, '/uploads/' + f.filename]);
      pool.query('INSERT INTO dorm_images (dorm_id, image_path) VALUES ?', [imageValues], (imgErr) => {
        if (imgErr) return res.status(500).json({ error: imgErr.message });
        res.json({ success: true });
      });
    } else {
      res.json({ success: true });
    }
  });
});

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≠‡∏û‡∏±‡∏Å (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å)
app.put('/owner/dorms/:id', authOwner, upload.array('images', 10), (req, res) => {
  const dormId = req.params.id;
  const owner_id = req.user.id;
  const { 
    name, price_daily, price_monthly, price_term, floor_count, room_count, 
    address_detail, water_cost, electricity_cost, deposit, contact_phone, 
    facilities, near_places, latitude, longitude, delete_images 
  } = req.body;

  console.log('üîß Debug - Update dorm request:', {
    dormId,
    delete_images,
    has_new_images: req.files?.length || 0
  });

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  pool.query('SELECT * FROM dorms WHERE id = ? AND owner_id = ?', [dormId, owner_id], (err, results) => {
    if (err) return res.status(500).json({ error: err.message });
    if (results.length === 0) return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' });

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≠‡∏û‡∏±‡∏Å
    const updateSql = `
      UPDATE dorms SET 
        name = ?, price_daily = ?, price_monthly = ?, price_term = ?, 
        floor_count = ?, room_count = ?, address_detail = ?, water_cost = ?, 
        electricity_cost = ?, deposit = ?, contact_phone = ?, facilities = ?, 
        near_places = ?
      WHERE id = ? AND owner_id = ?
    `;

    const updateValues = [
      name, price_daily, price_monthly, price_term, floor_count, room_count,
      address_detail, water_cost, electricity_cost, deposit, contact_phone,
      facilities, near_places, dormId, owner_id
    ];

    pool.query(updateSql, updateValues, (updateErr) => {
      if (updateErr) return res.status(500).json({ error: updateErr.message });

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏´‡∏≠‡∏û‡∏±‡∏Å
      if (latitude && longitude) {
        const checkCoordSql = 'SELECT id FROM location_coordinates WHERE dorm_id = ? AND location_type = "dorm_location"';
        pool.query(checkCoordSql, [dormId], (checkErr, coordResults) => {
          if (checkErr) {
            console.error('Error checking coordinates:', checkErr);
          } else if (coordResults.length > 0) {
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏î‡∏¥‡∏°
            const updateCoordSql = 'UPDATE location_coordinates SET latitude = ?, longitude = ?, location_name = ? WHERE dorm_id = ? AND location_type = "dorm_location"';
            pool.query(updateCoordSql, [latitude, longitude, name || '‡∏´‡∏≠‡∏û‡∏±‡∏Å', dormId], (coordUpdateErr) => {
              if (coordUpdateErr) {
                console.error('Error updating coordinates:', coordUpdateErr);
              } else {
                console.log('‚úÖ Updated dorm coordinates successfully');
                // ‡∏•‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà
                const deleteOldPlacesSql = 'DELETE FROM location_coordinates WHERE dorm_id = ? AND location_type = "nearby_place"';
                pool.query(deleteOldPlacesSql, [dormId], (deleteErr) => {
                  if (deleteErr) {
                    console.error('Error deleting old nearby places:', deleteErr);
                  } else {
                    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà
                    linkNearbyPlaces(dormId, parseFloat(latitude), parseFloat(longitude), near_places);
                  }
                });
              }
            });
          } else {
            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà
            const insertCoordSql = 'INSERT INTO location_coordinates (dorm_id, location_type, location_name, latitude, longitude) VALUES (?, "dorm_location", ?, ?, ?)';
            pool.query(insertCoordSql, [dormId, name || '‡∏´‡∏≠‡∏û‡∏±‡∏Å', latitude, longitude], (coordInsertErr) => {
              if (coordInsertErr) {
                console.error('Error inserting coordinates:', coordInsertErr);
              } else {
                console.log('‚úÖ Inserted new dorm coordinates successfully');
                // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
                linkNearbyPlaces(dormId, parseFloat(latitude), parseFloat(longitude), near_places);
              }
            });
          }
        });
      } else {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ‡∏Ñ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ
        console.log('üîÑ No new coordinates provided, keeping existing coordinates');
        // ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
        if (near_places) {
          // ‡∏´‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å
          const getExistingCoordSql = 'SELECT latitude, longitude FROM location_coordinates WHERE dorm_id = ? AND location_type = "dorm_location"';
          pool.query(getExistingCoordSql, [dormId], (getErr, existingCoords) => {
            if (!getErr && existingCoords.length > 0) {
              const existingLat = existingCoords[0].latitude;
              const existingLng = existingCoords[0].longitude;
              // ‡∏•‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡πÄ‡∏î‡∏¥‡∏°
              const deleteOldPlacesSql = 'DELETE FROM location_coordinates WHERE dorm_id = ? AND location_type = "nearby_place"';
              pool.query(deleteOldPlacesSql, [dormId], (deleteErr) => {
                if (!deleteErr) {
                  // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏î‡∏¥‡∏°
                  linkNearbyPlaces(dormId, parseFloat(existingLat), parseFloat(existingLng), near_places);
                }
              });
            }
          });
        }
      }

      // ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏ö
      if (delete_images && delete_images.length > 0) {
        const imagesToDelete = JSON.parse(delete_images);
        const deleteImageSql = 'DELETE FROM dorm_images WHERE image_path IN (?) AND dorm_id = ?';
        pool.query(deleteImageSql, [imagesToDelete, dormId], (delErr) => {
          if (delErr) console.error('Error deleting images:', delErr);
          else console.log('‚úÖ Deleted images:', imagesToDelete);
        });
      }

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà
      if (req.files && req.files.length > 0) {
        const imageValues = req.files.map(f => [dormId, '/uploads/' + f.filename]);
        pool.query('INSERT INTO dorm_images (dorm_id, image_path) VALUES ?', [imageValues], (imgErr) => {
          if (imgErr) return res.status(500).json({ error: imgErr.message });
          res.json({ success: true, message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
        });
      } else {
        res.json({ success: true, message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
      }
    });
  });
});

// Owner middleware
function authOwner(req, res, next) {
  const token = req.headers.authorization?.split(' ')[1];
  if (!token) return res.status(401).json({ error: 'No token' });

  jwt.verify(token, process.env.JWT_SECRET || 'your_secret_key', (err, decoded) => {
    if (err) return res.status(401).json({ error: 'Invalid token' });
    if (decoded.role !== 'owner') return res.status(403).json({ error: 'Access denied' });
    req.user = decoded;
    next();
  });
}

// Customer middleware
function authCustomer(req, res, next) {
  const token = req.headers.authorization?.split(' ')[1];
  if (!token) return res.status(401).json({ error: 'No token' });

  jwt.verify(token, process.env.JWT_SECRET || 'your_secret_key', (err, decoded) => {
    if (err) return res.status(401).json({ error: 'Invalid token' });
    if (decoded.role !== 'customer') return res.status(403).json({ error: 'Access denied' });
    req.user = decoded;
    next();
  });
}

// === CUSTOMER PROFILE ENDPOINTS ===

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
app.get('/customer/profile', authCustomer, (req, res) => {
  const customerId = req.user.id;
  
  const sql = `SELECT * FROM customers WHERE id = ?`;
  
  pool.query(sql, [customerId], (err, results) => {
    if (err) {
      console.error('Error fetching customer profile:', err);
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå' });
    }
    
    if (results.length === 0) {
      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' });
    }
    
    const customer = results[0];
    // ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    delete customer.password;
    
    res.json(customer);
  });
});

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
app.put('/customer/profile', authCustomer, (req, res) => {
  const customerId = req.user.id;
  const { 
    firstName, lastName, age, dob, houseNo, moo, soi, road, 
    subdistrict, district, province, email, phone, zip_code 
  } = req.body;
  
  const sql = `
    UPDATE customers 
    SET firstName = ?, lastName = ?, age = ?, dob = ?, 
        houseNo = ?, moo = ?, soi = ?, road = ?, subdistrict = ?, 
        district = ?, province = ?, email = ?, phone = ?, zip_code = ?
    WHERE id = ?
  `;
  
  pool.query(sql, [
    firstName, lastName, age, dob, houseNo, moo, soi, road,
    subdistrict, district, province, email, phone, zip_code, customerId
  ], (err, result) => {
    if (err) {
      console.error('Error updating customer profile:', err);
      if (err.code === 'ER_DUP_ENTRY') {
        return res.status(400).json({ error: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß' });
      }
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
    }
    
    if (result.affectedRows === 0) {
      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó' });
    }
    
    res.json({ success: true, message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  });
});

// ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
app.post('/customer/upload-avatar', authCustomer, uploadProfile.single('avatar'), (req, res) => {
  if (!req.file) {
    return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û' });
  }

  const customerId = req.user.id;
  const avatarUrl = `/uploads/${req.file.filename}`;

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó URL ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const sql = `UPDATE customers SET avatar_url = ? WHERE id = ?`;
  
  pool.query(sql, [avatarUrl, customerId], (err, result) => {
    if (err) {
      console.error('Error updating avatar URL:', err);
      // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      fs.unlink(req.file.path, (unlinkErr) => {
        if (unlinkErr) console.error('Error deleting uploaded file:', unlinkErr);
      });
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå' });
    }

    if (result.affectedRows === 0) {
      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' });
    }

    res.json({ 
      success: true, 
      message: '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 
      avatarUrl: avatarUrl 
    });
  });
});

// === ADMIN ENDPOINTS ===

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Admin endpoint
app.get('/admin/test', verifyAdminToken, (req, res) => {
  res.json({ message: 'Admin API working', user: req.user, timestamp: new Date().toISOString() });
});

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö token ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô admin
app.get('/admin/auth-test', (req, res) => {
  const token = req.headers.authorization?.split(' ')[1];
  
  if (!token) {
    return res.status(401).json({ error: 'No token provided' });
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'your_secret_key');
    res.json({ 
      message: 'Token valid', 
      decoded, 
      isAdmin: decoded.role === 'admin',
      timestamp: new Date().toISOString()
    });
  } catch (err) {
    res.status(401).json({ 
      error: 'Invalid token', 
      details: err.message,
      timestamp: new Date().toISOString()
    });
  }
});

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Admin) - ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
app.get('/admin/users', verifyAdminToken, (req, res) => {
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• customers ‡∏Å‡πà‡∏≠‡∏ô
  pool.query('SELECT id, firstName, lastName, email, phone FROM customers', (err1, customers) => {
    if (err1) {
      console.error('Error fetching customers:', err1);
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤', details: err1.message });
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• owners
    pool.query('SELECT id, firstName, lastName, email, phone FROM owners', (err2, owners) => {
      if (err2) {
        console.error('Error fetching owners:', err2);
        return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á', details: err2.message });
      }

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• admins
      pool.query('SELECT id, firstName, lastName, email, phone FROM admins', (err3, admins) => {
        if (err3) {
          console.error('Error fetching admins:', err3);
          return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô', details: err3.message });
        }

        // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        const allUsers = [
          ...customers.map(user => ({ ...user, role: 'customer' })),
          ...owners.map(user => ({ ...user, role: 'owner' })),
          ...admins.map(user => ({ ...user, role: 'admin' }))
        ];

        res.json(allUsers);
      });
    });
  });
});

/**
 * Add new user (Admin only)
 * @route POST /admin/users
 */
app.post('/admin/users', verifyAdminToken, async (req, res) => {
  const { role, firstName, lastName, email, password, phone, age, dob, 
          houseNo, moo, soi, road, subdistrict, district, province, dormName } = req.body;

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ email ‡∏ã‡πâ‡∏≥‡πÑ‡∏´‡∏°
    const emailCheckPromises = [
      new Promise((resolve, reject) => {
        pool.query('SELECT id FROM customers WHERE email = ?', [email], (err, results) => {
          if (err) reject(err);
          else resolve(results.length > 0);
        });
      }),
      new Promise((resolve, reject) => {
        pool.query('SELECT id FROM owners WHERE email = ?', [email], (err, results) => {
          if (err) reject(err);
          else resolve(results.length > 0);
        });
      }),
      new Promise((resolve, reject) => {
        pool.query('SELECT id FROM admins WHERE email = ?', [email], (err, results) => {
          if (err) reject(err);
          else resolve(results.length > 0);
        });
      })
    ];

    const emailExists = await Promise.all(emailCheckPromises);
    if (emailExists.some(exists => exists)) {
      return res.status(400).json({ error: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß' });
    }

    // Hash password
    const saltRounds = 10;
    const hashedPassword = await bcrypt.hash(password, saltRounds);

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ï‡∏≤‡∏° role
    let tableName, insertData;
    if (role === 'customer') {
      tableName = 'customers';
      insertData = { firstName, lastName, email, password: hashedPassword, phone, age, dob, 
                    houseNo, moo, soi, road, subdistrict, district, province };
    } else if (role === 'owner') {
      tableName = 'owners';
      insertData = { firstName, lastName, email, password: hashedPassword, phone, age, dob, 
                    houseNo, moo, soi, road, subdistrict, district, province, dormName };
    } else if (role === 'admin') {
      tableName = 'admins';
      insertData = { firstName, lastName, email, password: hashedPassword, phone };
    } else {
      return res.status(400).json({ error: '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
    }

    // Insert ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const columns = Object.keys(insertData).join(', ');
    const values = Object.values(insertData);
    const placeholders = values.map(() => '?').join(', ');

    pool.query(`INSERT INTO ${tableName} (${columns}) VALUES (${placeholders})`, values, (err, result) => {
      if (err) {
        console.error(`Error inserting ${role}:`, err);
        return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' });
      }

      res.status(201).json({ 
        success: true, 
        message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        userId: result.insertId 
      });
    });

  } catch (error) {
    console.error('Error adding user:', error);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' });
  }
});

/**
 * Update user (Admin only)
 * @route PUT /admin/users/:id
 */
app.put('/admin/users/:id', verifyAdminToken, async (req, res) => {
  const userId = req.params.id;
  const userRole = req.query.role;
  const { role, firstName, lastName, email, password, phone, age, dob, 
          houseNo, moo, soi, road, subdistrict, district, province, dormName } = req.body;

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ email ‡∏ã‡πâ‡∏≥‡πÑ‡∏´‡∏° (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
    const currentTableName = userRole === 'customer' ? 'customers' : 
                            userRole === 'owner' ? 'owners' : 'admins';
    
    const emailCheckPromises = [
      new Promise((resolve, reject) => {
        pool.query('SELECT id FROM customers WHERE email = ? AND id != ?', [email, userRole === 'customer' ? userId : 0], (err, results) => {
          if (err) reject(err);
          else resolve(results.length > 0);
        });
      }),
      new Promise((resolve, reject) => {
        pool.query('SELECT id FROM owners WHERE email = ? AND id != ?', [email, userRole === 'owner' ? userId : 0], (err, results) => {
          if (err) reject(err);
          else resolve(results.length > 0);
        });
      }),
      new Promise((resolve, reject) => {
        pool.query('SELECT id FROM admins WHERE email = ? AND id != ?', [email, userRole === 'admin' ? userId : 0], (err, results) => {
          if (err) reject(err);
          else resolve(results.length > 0);
        });
      })
    ];

    const emailExists = await Promise.all(emailCheckPromises);
    if (emailExists.some(exists => exists)) {
      return res.status(400).json({ error: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß' });
    }

    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    let updateData;
    if (role === 'customer') {
      updateData = { firstName, lastName, email, phone, age, dob, 
                    houseNo, moo, soi, road, subdistrict, district, province };
    } else if (role === 'owner') {
      updateData = { firstName, lastName, email, phone, age, dob, 
                    houseNo, moo, soi, road, subdistrict, district, province, dormName };
    } else if (role === 'admin') {
      updateData = { firstName, lastName, email, phone };
    } else {
      return res.status(400).json({ error: '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° password ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏°‡∏≤
    if (password && password.trim()) {
      const saltRounds = 10;
      updateData.password = await bcrypt.hash(password, saltRounds);
    }

    const tableName = role === 'customer' ? 'customers' : 
                     role === 'owner' ? 'owners' : 'admins';

    // ‡∏ñ‡πâ‡∏≤ role ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (userRole !== role) {
      // ‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏°
      pool.query(`DELETE FROM ${currentTableName} WHERE id = ?`, [userId], (deleteErr) => {
        if (deleteErr) {
          console.error('Error deleting from old table:', deleteErr);
          return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
        }

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
        const columns = Object.keys(updateData).join(', ');
        const values = Object.values(updateData);
        const placeholders = values.map(() => '?').join(', ');

        pool.query(`INSERT INTO ${tableName} (${columns}) VALUES (${placeholders})`, values, (insertErr, result) => {
          if (insertErr) {
            console.error('Error inserting into new table:', insertErr);
            return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
          }

          res.json({ 
            success: true, 
            message: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
            newUserId: result.insertId 
          });
        });
      });
    } else {
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏°
      const setClause = Object.keys(updateData).map(key => `${key} = ?`).join(', ');
      const values = [...Object.values(updateData), userId];

      pool.query(`UPDATE ${tableName} SET ${setClause} WHERE id = ?`, values, (err, result) => {
        if (err) {
          console.error(`Error updating ${role}:`, err);
          return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
        }

        if (result.affectedRows === 0) {
          return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' });
        }

        res.json({ success: true, message: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
      });
    }

  } catch (error) {
    console.error('Error updating user:', error);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
  }
});

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin - ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
app.get('/admin/dorms', verifyAdminToken, (req, res) => {
  const status = req.query.status;
  
  // ‡∏õ‡∏£‡∏±‡∏ö query ‡πÉ‡∏´‡πâ‡∏£‡∏ß‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á dorm_images ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á owners
  let sql = `
    SELECT 
      dorms.*,
      owners.firstName as owner_firstName,
      owners.lastName as owner_lastName,
      owners.phone as owner_phone,
      owners.email as owner_email,
      GROUP_CONCAT(dorm_images.image_path) AS images
    FROM dorms 
    LEFT JOIN dorm_images ON dorms.id = dorm_images.dorm_id
    LEFT JOIN owners ON dorms.owner_id = owners.id
  `;
  
  let params = [];
  
  if (status && status !== 'all') {
    sql += ' WHERE dorms.status = ?';
    params = [status];
  }
  
  sql += ' GROUP BY dorms.id ORDER BY dorms.created_at DESC';
  
  pool.query(sql, params, (err, results) => {
    if (err) {
      console.error('Error fetching dorms for admin:', err);
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≠‡∏û‡∏±‡∏Å', details: err.message });
    }
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å GROUP_CONCAT string ‡πÄ‡∏õ‡πá‡∏ô array
    const processedResults = results.map(dorm => ({
      ...dorm,
      images: dorm.images ? dorm.images.split(',') : []
    }));
    
    console.log('üìä Admin dorms fetched:', processedResults.length, 'dorms with images');
    
    res.json(processedResults);
  });
});

// ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏≠‡∏û‡∏±‡∏Å (Admin)
app.put('/admin/dorms/:id/approve', verifyAdminToken, (req, res) => {
  const dormId = req.params.id;
  
  const sql = 'UPDATE dorms SET status = ? WHERE id = ?';
  
  pool.query(sql, ['approved', dormId], (err, result) => {
    if (err) {
      console.error('Error approving dorm:', err);
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏≠‡∏û‡∏±‡∏Å' });
    }
    
    if (result.affectedRows === 0) {
      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' });
    }
    
    res.json({ success: true, message: '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  });
});

// ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏´‡∏≠‡∏û‡∏±‡∏Å (Admin)
app.put('/admin/dorms/:id/reject', verifyAdminToken, (req, res) => {
  const dormId = req.params.id;
  const { reason } = req.body;
  
  const sql = 'UPDATE dorms SET status = ?, reject_reason = ? WHERE id = ?';
  
  pool.query(sql, ['rejected', reason || null, dormId], (err, result) => {
    if (err) {
      console.error('Error rejecting dorm:', err);
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏´‡∏≠‡∏û‡∏±‡∏Å' });
    }
    
    if (result.affectedRows === 0) {
      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò' });
    }
    
    res.json({ success: true, message: '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  });
});

// ‡∏•‡∏ö‡∏´‡∏≠‡∏û‡∏±‡∏Å (Admin)
app.delete('/admin/dorms/:id', verifyAdminToken, (req, res) => {
  const dormId = req.params.id;
  
  // ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô
  pool.query('DELETE FROM dorm_images WHERE dorm_id = ?', [dormId], (err) => {
    if (err) {
      console.error('Error deleting dorm images:', err);
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û' });
    }
    
    // ‡∏•‡∏ö‡∏´‡∏≠‡∏û‡∏±‡∏Å
    pool.query('DELETE FROM dorms WHERE id = ?', [dormId], (err, result) => {
      if (err) {
        console.error('Error deleting dorm:', err);
        return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡∏≠‡∏û‡∏±‡∏Å' });
      }
      
      if (result.affectedRows === 0) {
        return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö' });
      }
      
      res.json({ success: true, message: '‡∏•‡∏ö‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
    });
  });
});

// ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Admin)
/**
 * Delete user (Admin only)
 * @route DELETE /admin/users/:id?role=userRole
 */
app.delete('/admin/users/:id', verifyAdminToken, (req, res) => {
  const userId = req.params.id;
  const userRole = req.query.role;
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  const allowedTypes = ['customer', 'owner', 'admin'];
  if (!allowedTypes.includes(userRole)) {
    return res.status(400).json({ error: '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
  }
  
  const tableName = userRole === 'customer' ? 'customers' : 
                   userRole === 'owner' ? 'owners' : 'admins';
  const sql = `DELETE FROM ${tableName} WHERE id = ?`;
  
  pool.query(sql, [userId], (err, result) => {
    if (err) {
      console.error(`Error deleting ${userRole}:`, err);
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' });
    }
    
    if (result.affectedRows === 0) {
      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö' });
    }
    
    res.json({ success: true, message: '‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  });
});

// === ADMIN MANAGEMENT ENDPOINTS ===

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
app.get('/admin/admins', verifyAdminToken, (req, res) => {
  const sql = `
    SELECT * FROM admins 
    ORDER BY id DESC
  `;
  
  pool.query(sql, (err, results) => {
    if (err) {
      console.error('Error fetching admins:', err);
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô', details: err.message });
    }
    
    // ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    const admins = results.map(admin => {
      const { password, ...adminWithoutPassword } = admin;
      return adminWithoutPassword;
    });
    
    res.json(admins);
  });
});

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
app.get('/admin/roles', verifyAdminToken, (req, res) => {
  const sql = 'SELECT * FROM roles ORDER BY id';
  
  pool.query(sql, (err, results) => {
    if (err) {
      console.error('Error fetching roles:', err);
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó', details: err.message });
    }
    
    res.json(results);
  });
});

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà
app.post('/admin/admins', verifyAdminToken, async (req, res) => {
  const {
    firstName, lastName, age, dob, houseNo, moo, soi, road,
    subdistrict, district, province, email, password, phone,
    role_id: role_name, zip_code
  } = req.body;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
  if (!firstName || !lastName || !email || !password || !phone || !role_name) {
    return res.status(400).json({ 
      error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô (‡∏ä‡∏∑‡πà‡∏≠, ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•, ‡∏≠‡∏µ‡πÄ‡∏°‡∏•, ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô, ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£, ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó)' 
    });
  }

  try {
    // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    const hashedPassword = await bcrypt.hash(password, 10);

    const sql = `
      INSERT INTO admins 
      (firstName, lastName, age, dob, houseNo, moo, soi, road, 
       subdistrict, district, province, email, password, phone, role_name, zip_code)
      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `;

    pool.query(sql, [
      firstName, lastName, age, dob, houseNo, moo, soi, road,
      subdistrict, district, province, email, hashedPassword, phone,
      role_name, zip_code
    ], (err, result) => {
      if (err) {
        console.error('Error adding admin:', err);
        if (err.code === 'ER_DUP_ENTRY') {
          return res.status(400).json({ error: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß' });
        }
        return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô', details: err.message });
      }

      res.status(201).json({ 
        success: true, 
        message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        adminId: result.insertId 
      });
    });
  } catch (error) {
    console.error('Error hashing password:', error);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô' });
  }
});

// ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
app.put('/admin/admins/:id', verifyAdminToken, async (req, res) => {
  const adminId = req.params.id;
  const {
    firstName, lastName, age, dob, houseNo, moo, soi, road,
    subdistrict, district, province, email, password, phone,
    role_id: role_name, zip_code
  } = req.body;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
  if (!firstName || !lastName || !email || !phone || !role_name) {
    return res.status(400).json({ 
      error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô (‡∏ä‡∏∑‡πà‡∏≠, ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•, ‡∏≠‡∏µ‡πÄ‡∏°‡∏•, ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£, ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó)' 
    });
  }

  try {
    let sql, params;

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    if (password) {
      const hashedPassword = await bcrypt.hash(password, 10);
      sql = `
        UPDATE admins 
        SET firstName = ?, lastName = ?, age = ?, dob = ?, houseNo = ?, moo = ?, 
            soi = ?, road = ?, subdistrict = ?, district = ?, province = ?, 
            email = ?, password = ?, phone = ?, role_name = ?, zip_code = ?
        WHERE id = ?
      `;
      params = [
        firstName, lastName, age, dob, houseNo, moo, soi, road,
        subdistrict, district, province, email, hashedPassword, phone,
        role_name, zip_code, adminId
      ];
    } else {
      // ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
      sql = `
        UPDATE admins 
        SET firstName = ?, lastName = ?, age = ?, dob = ?, houseNo = ?, moo = ?, 
            soi = ?, road = ?, subdistrict = ?, district = ?, province = ?, 
            email = ?, phone = ?, role_name = ?, zip_code = ?
        WHERE id = ?
      `;
      params = [
        firstName, lastName, age, dob, houseNo, moo, soi, road,
        subdistrict, district, province, email, phone,
        role_name, zip_code, adminId
      ];
    }

    pool.query(sql, params, (err, result) => {
      if (err) {
        console.error('Error updating admin:', err);
        if (err.code === 'ER_DUP_ENTRY') {
          return res.status(400).json({ error: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß' });
        }
        return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô', details: err.message });
      }

      if (result.affectedRows === 0) {
        return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó' });
      }

      res.json({ success: true, message: '‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
    });
  } catch (error) {
    console.error('Error processing admin update:', error);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
  }
});

// ‡∏•‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
app.delete('/admin/admins/:id', verifyAdminToken, (req, res) => {
  const adminId = req.params.id;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
  if (parseInt(adminId) === req.user.id) {
    return res.status(400).json({ error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ' });
  }

  const sql = 'DELETE FROM admins WHERE id = ?';

  pool.query(sql, [adminId], (err, result) => {
    if (err) {
      console.error('Error deleting admin:', err);
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô', details: err.message });
    }

    if (result.affectedRows === 0) {
      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö' });
    }

    res.json({ success: true, message: '‡∏•‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  });
});

// === OWNER PROFILE ENDPOINTS ===

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å
app.get('/owner/profile', authOwner, (req, res) => {
  const ownerId = req.user.id;
  
  const sql = `SELECT * FROM owners WHERE id = ?`;
  
  pool.query(sql, [ownerId], (err, results) => {
    if (err) {
      console.error('Error fetching owner profile:', err);
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå' });
    }
    
    if (results.length === 0) {
      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' });
    }
    
    const owner = results[0];
    // ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    delete owner.password;
    
    res.json(owner);
  });
});

// ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å
app.put('/owner/profile', authOwner, (req, res) => {
  const ownerId = req.user.id;
  const { 
    dormName, firstName, lastName, age, dob, houseNo, moo, soi, road, 
    subdistrict, district, province, email, phone, zip_code, profile_image 
  } = req.body;
  
  const sql = `
    UPDATE owners 
    SET dormName = ?, firstName = ?, lastName = ?, age = ?, dob = ?, 
        houseNo = ?, moo = ?, soi = ?, road = ?, subdistrict = ?, 
        district = ?, province = ?, email = ?, phone = ?, zip_code = ?, profile_image = ?
    WHERE id = ?
  `;
  
  pool.query(sql, [
    dormName, firstName, lastName, age, dob, houseNo, moo, soi, road,
    subdistrict, district, province, email, phone, zip_code, profile_image, ownerId
  ], (err, result) => {
    if (err) {
      console.error('Error updating owner profile:', err);
      if (err.code === 'ER_DUP_ENTRY') {
        return res.status(400).json({ error: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß' });
      }
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
    }
    
    if (result.affectedRows === 0) {
      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó' });
    }
    
    res.json({ success: true, message: '‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  });
});

// ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å
app.post('/owner/upload-profile-image', authOwner, uploadOwnerProfile.single('profileImage'), (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ 
        success: false, 
        error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î' 
      });
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    const imageUrl = `/uploads/${req.file.filename}`;
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà
    const sql = 'UPDATE owners SET profile_image = ? WHERE id = ?';
    pool.query(sql, [imageUrl, req.user.id], (err, result) => {
      if (err) {
        console.error('Error updating profile image in database:', err);
        // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        try {
          fs.unlinkSync(path.join(__dirname, 'uploads', req.file.filename));
        } catch (unlinkErr) {
          console.error('Error deleting uploaded file:', unlinkErr);
        }
        return res.status(500).json({ 
          success: false, 
          error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û' 
        });
      }

      res.json({
        success: true,
        message: '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        imageUrl: imageUrl,
        filename: req.file.filename
      });
    });

  } catch (error) {
    console.error('Error in profile image upload:', error);
    res.status(500).json({ 
      success: false, 
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û' 
    });
  }
});

// === REVIEWS API ENDPOINTS ===

// ‡∏î‡∏∂‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞
app.get('/dorms/:id/reviews', (req, res) => {
  const dormId = req.params.id;
  
  const sql = `
    SELECT r.*, 
           c.firstName, c.lastName, c.avatar_url,
           d.name as dormName
    FROM reviews r
    LEFT JOIN customers c ON r.customer_id = c.id
    LEFT JOIN dorms d ON r.dorm_id = d.id
    WHERE r.dorm_id = ?
    ORDER BY r.created_at DESC
  `;
  
  pool.query(sql, [dormId], (err, results) => {
    if (err) {
      console.error('Error fetching reviews:', err);
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß' });
    }
    
    const reviews = results.map(review => ({
      id: review.id,
      rating: review.rating,
      comment: review.comment,
      cleanliness_rating: review.cleanliness_rating,
      location_rating: review.location_rating,
      value_rating: review.value_rating,
      service_rating: review.service_rating,
      customerName: `${review.firstName || ''} ${review.lastName || ''}`.trim() || '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',
      customerAvatar: review.avatar_url,
      dormName: review.dormName,
      date: review.created_at,
      created_at: review.created_at
    }));
    
    res.json(reviews);
  });
});

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÉ‡∏´‡∏°‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤)
app.post('/dorms/:id/reviews', verifyToken, (req, res) => {
  const dormId = req.params.id;
  const customerId = req.user.id;
  const { rating, comment, cleanliness_rating, location_rating, value_rating, service_rating } = req.body;
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö role
  if (req.user.role !== 'customer') {
    return res.status(403).json({ error: '‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÑ‡∏î‡πâ' });
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  pool.query('SELECT id FROM reviews WHERE customer_id = ? AND dorm_id = ?', 
    [customerId, dormId], (err, existing) => {
    if (err) {
      console.error('Error checking existing review:', err);
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß' });
    }
    
    if (existing.length > 0) {
      return res.status(400).json({ error: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß' });
    }
    
    const insertSql = `
      INSERT INTO reviews (customer_id, dorm_id, rating, comment, cleanliness_rating, location_rating, value_rating, service_rating)
      VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    `;
    
    pool.query(insertSql, [
      customerId, dormId, rating, comment || null,
      cleanliness_rating || null, location_rating || null, 
      value_rating || null, service_rating || null
    ], (err, result) => {
      if (err) {
        console.error('Error inserting review:', err);
        return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏µ‡∏ß‡∏¥‡∏ß' });
      }
      
      res.json({ success: true, reviewId: result.insertId });
    });
  });
});

// ‡∏î‡∏∂‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Owner)
app.get('/owner/reviews', authOwner, (req, res) => {
  const ownerId = req.user.id;
  
  const sql = `
    SELECT r.*, 
           c.firstName, c.lastName, c.avatar_url,
           d.name as dormName
    FROM reviews r
    LEFT JOIN customers c ON r.customer_id = c.id
    LEFT JOIN dorms d ON r.dorm_id = d.id
    WHERE d.owner_id = ?
    ORDER BY r.created_at DESC
  `;
  
  pool.query(sql, [ownerId], (err, results) => {
    if (err) {
      console.error('Error fetching owner reviews:', err);
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß' });
    }
    
    const reviews = results.map(review => ({
      id: review.id,
      rating: review.rating,
      comment: review.comment,
      cleanliness_rating: review.cleanliness_rating,
      location_rating: review.location_rating,
      value_rating: review.value_rating,
      service_rating: review.service_rating,
      customerName: `${review.firstName || ''} ${review.lastName || ''}`.trim() || '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',
      customerAvatar: review.avatar_url,
      dormName: review.dormName,
      date: review.created_at,
      created_at: review.created_at
    }));
    
    res.json(reviews);
  });
});

// ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞
app.get('/dorms/:id/reviews/stats', (req, res) => {
  const dormId = req.params.id;
  
  const sql = `
    SELECT 
      COUNT(*) as total_reviews,
      AVG(rating) as average_rating,
      AVG(cleanliness_rating) as avg_cleanliness,
      AVG(location_rating) as avg_location,
      AVG(value_rating) as avg_value,
      AVG(service_rating) as avg_service,
      SUM(CASE WHEN rating = 5 THEN 1 ELSE 0 END) as five_stars,
      SUM(CASE WHEN rating = 4 THEN 1 ELSE 0 END) as four_stars,
      SUM(CASE WHEN rating = 3 THEN 1 ELSE 0 END) as three_stars,
      SUM(CASE WHEN rating = 2 THEN 1 ELSE 0 END) as two_stars,
      SUM(CASE WHEN rating = 1 THEN 1 ELSE 0 END) as one_stars
    FROM reviews 
    WHERE dorm_id = ?
  `;
  
  pool.query(sql, [dormId], (err, results) => {
    if (err) {
      console.error('Error fetching review stats:', err);
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏µ‡∏ß‡∏¥‡∏ß' });
    }
    
    const stats = results[0] || {
      total_reviews: 0,
      average_rating: 0,
      avg_cleanliness: 0,
      avg_location: 0,
      avg_value: 0,
      avg_service: 0,
      five_stars: 0,
      four_stars: 0,
      three_stars: 0,
      two_stars: 0,
      one_stars: 0
    };
    
    res.json(stats);
  });
});

// ==================== UTILITY MANAGEMENT API ====================

/**
 * Sync room count for all dorms (Admin utility function)
 * @route POST /admin/sync-room-count
 * @returns {Object} Success message with updated count
 */
app.post('/admin/sync-room-count', authOwner, (req, res) => {
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏´‡∏≠‡∏û‡∏±‡∏Å
  pool.query(`
    UPDATE dorms 
    SET room_count = (
      SELECT COUNT(*) 
      FROM rooms 
      WHERE rooms.dorm_id = dorms.id
    )
  `, (err, result) => {
    if (err) {
      console.error('Error syncing room count:', err);
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡πâ‡∏≠‡∏á' });
    }

    res.json({ 
      message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      affectedRows: result.affectedRows
    });
  });
});

/**
 * Sync room count for specific dorm
 * @route POST /dorms/:dormId/sync-room-count
 * @param {string} dormId - ID of the dorm
 * @returns {Object} Success message
 */
app.post('/dorms/:dormId/sync-room-count', authOwner, (req, res) => {
  const { dormId } = req.params;
  const ownerId = req.user.id;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á
  pool.query('SELECT id FROM dorms WHERE id = ? AND owner_id = ?', [dormId, ownerId], (err, results) => {
    if (err) {
      console.error('Database error:', err);
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
    }

    if (results.length === 0) {
      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á' });
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å
    pool.query('UPDATE dorms SET room_count = (SELECT COUNT(*) FROM rooms WHERE dorm_id = ?) WHERE id = ?', 
      [dormId, dormId], (updateErr, result) => {
      if (updateErr) {
        console.error('Error updating room count:', updateErr);
        return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡πâ‡∏≠‡∏á' });
      }

      res.json({ message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
    });
  });
});

// ==================== CHATBOT API ====================

// Helper: ‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÑ‡∏ó‡∏¢ -> ‡∏≠‡∏≤‡∏£‡∏ö‡∏¥‡∏Å (‡∏´‡∏¢‡∏≤‡∏ö‡πÜ)
function normalizeThaiNumerals(str = '') {
  const map = { '‡πê':'0','‡πë':'1','‡πí':'2','‡πì':'3','‡πî':'4','‡πï':'5','‡πñ':'6','‡πó':'7','‡πò':'8','‡πô':'9' };
  return str.replace(/[‡πê-‡πô]/g, d => map[d] || d);
}

// Helper: ‡∏´‡∏≤ price (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç) ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
function extractBudget(message) {
  const norm = normalizeThaiNumerals(message).replace(/[, ]+/g,'');
  const m = norm.match(/(\d{3,6})/); // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏°‡∏±‡∏Å‡∏≠‡∏¢‡∏π‡πà‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏µ‡πâ
  return m ? parseInt(m[1], 10) : null;
}

// Helper: ‡∏Å‡∏£‡∏≠‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏ß‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå)
function filterDormsForQuery(message, dorms) {
  const msg = message.toLowerCase();
  const budget = extractBudget(msg);
  let results = [...dorms];

  // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏á‡∏ö ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏∏
  if (budget) {
    results = results.filter(d => {
      const prices = [d.price_monthly, d.price_daily, d.price_term]
        .filter(p => p && !isNaN(p))
        .map(Number);
      if (prices.length === 0) return false;
      return prices.some(p => p <= budget);
    });
  }

  // ‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å
  const facilityKeywords = ['wifi','‡πÑ‡∏ß‡πÑ‡∏ü','internet','‡πÅ‡∏≠‡∏£‡πå','air','‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏®','‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏ô‡∏¥‡πÄ‡∏à‡∏≠‡∏£‡πå','‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏î‡∏£‡∏ñ','parking','‡∏•‡∏¥‡∏ü‡∏ï‡πå','cctv'];
  const matchedFacilities = facilityKeywords.filter(k => msg.includes(k));
  if (matchedFacilities.length) {
    results = results.filter(d => (d.facilities||'').toLowerCase().includes(
      matchedFacilities[0] // ‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å‡∏û‡∏≠
    ));
  }

  // ‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á (‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ ‡πÉ‡∏Å‡∏•‡πâ / near)
  if (/‡πÉ‡∏Å‡∏•‡πâ|near|‡πÅ‡∏ñ‡∏ß|‡∏•‡∏∞‡πÅ‡∏ß‡∏Å/.test(msg)) {
    // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏´‡∏•‡∏±‡∏á "‡πÉ‡∏Å‡∏•‡πâ" ‡∏´‡∏£‡∏∑‡∏≠ "‡πÅ‡∏ñ‡∏ß" ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏´‡∏¢‡∏≤‡∏ö
    const placeMatch = msg.match(/(?:‡πÉ‡∏Å‡∏•‡πâ|‡πÅ‡∏ñ‡∏ß|near)\s*([\u0E00-\u0E7Fa-zA-Z0-9]+)/);
    if (placeMatch) {
      const token = placeMatch[1];
      results = results.filter(d => (d.near_places||'').toLowerCase().includes(token));
    }
  }

  // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô context ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô (‡πÄ‡∏ä‡πà‡∏ô 15 ‡πÅ‡∏£‡∏Å) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î token
  return results.slice(0, 15);
}

// Helper: ‡∏™‡∏£‡πâ‡∏≤‡∏á context (‡∏™‡∏±‡πâ‡∏ô‡∏•‡∏á) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•
function buildDormContext(dorms) {
  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å‡∏ñ‡∏π‡∏Å‡πÑ‡∏õ‡πÅ‡∏û‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ AI
  const sortedDorms = [...dorms].sort((a, b) => {
    // ‡∏´‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏≠
    const pricesA = [a.price_monthly, a.price_daily, a.price_term].filter(p => p && Number(p) > 0).map(Number);
    const pricesB = [b.price_monthly, b.price_daily, b.price_term].filter(p => p && Number(p) > 0).map(Number);
    
    const minPriceA = pricesA.length > 0 ? Math.min(...pricesA) : Infinity;
    const minPriceB = pricesB.length > 0 ? Math.min(...pricesB) : Infinity;
    
    return minPriceA - minPriceB;
  });

  return sortedDorms.map(dorm => {
    const prices = [];
    if (dorm.price_monthly) prices.push(`‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ${dorm.price_monthly}`);
    if (dorm.price_daily) prices.push(`‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô ${dorm.price_daily}`);
    if (dorm.price_term) prices.push(`‡∏£‡∏≤‡∏¢‡πÄ‡∏ó‡∏≠‡∏° ${dorm.price_term}`);
    return `‡∏ä‡∏∑‡πà‡∏≠: ${dorm.name}\n‡∏£‡∏≤‡∏Ñ‡∏≤: ${prices.join(' | ') || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: ${dorm.address_detail || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n‡πÉ‡∏Å‡∏•‡πâ: ${dorm.near_places || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å: ${dorm.facilities || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n‡∏ô‡πâ‡∏≥/‡πÑ‡∏ü: ${dorm.water_cost || '-'} / ${dorm.electricity_cost || '-'}\n‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠: ${dorm.contact_phone || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`;
  }).join('\n\n');
}

// Helper: ‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö rule-based ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏á‡πà‡∏≤‡∏¢ ‡∏•‡∏î‡∏†‡∏≤‡∏£‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏•
function answerSimpleQuery(message, dorms) {
  const msg = message.toLowerCase();
  
  // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  if (/‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡∏µ‡πà|‡∏Å‡∏µ‡πà‡∏´‡∏≠|‡∏Å‡∏µ‡πà‡πÅ‡∏´‡πà‡∏á|‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î/.test(msg) && /‡∏´‡∏≠/.test(msg)) {
    return `‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${dorms.length} ‡πÅ‡∏´‡πà‡∏á‡∏Ñ‡πà‡∏∞ üè†`;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏≤‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡∏π‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
  const cheapestResponse = answerCheapestDormQuery(message, dorms);
  if (cheapestResponse) {
    return cheapestResponse;
  }

  // ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏´‡∏≠‡∏û‡∏±‡∏Å (‡∏ö‡∏≤‡∏á pattern) ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
  if (!/‡∏´‡∏≠|‡∏î‡∏≠‡∏£‡πå‡∏°|dorm|‡∏£‡∏≤‡∏Ñ‡∏≤|‡πÄ‡∏ä‡πà‡∏≤|‡πÉ‡∏Å‡∏•‡πâ|‡πÅ‡∏≠‡∏£‡πå|wifi|‡πÑ‡∏ß‡πÑ‡∏ü|‡∏´‡πâ‡∏≠‡∏á|‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö|‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á/.test(msg)) {
    if (/‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ|hello|hi|‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ/.test(msg)) {
      return '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ üòä ‡∏°‡∏µ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞?';
    }
    return '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏â‡∏±‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô üè† ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏´‡∏≠‡∏û‡∏±‡∏Å‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞?';
  }
  return null; // ‡πÉ‡∏´‡πâ AI ‡∏ï‡∏≠‡∏ö‡∏ï‡πà‡∏≠
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Groq AI
async function callGroqAI(userMessage, dormContext) {
  const API_KEY = process.env.GROQ_API_KEY;
  
  if (!API_KEY) {
    console.warn('‚ö†Ô∏è GROQ_API_KEY not configured - using fallback response');
    return null; // ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö null ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£ throw error
  }

  const systemPrompt = `‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏≠‡∏û‡∏±‡∏Å Smart Dorm ‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠ "Smart Assistant" ü§ñ

**‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:**
- ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏°‡∏≤
- ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
- ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
- ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏ô‡πÉ‡∏à
- ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£ ‡πÉ‡∏ä‡πâ emoji ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°

**‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°:**
- ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏° (‡∏°.‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°) - ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏´‡∏•‡∏±‡∏Å
- ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏£‡∏≤‡∏ä‡∏†‡∏±‡∏è‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏° - ‡∏™‡∏ñ‡∏≤‡∏ö‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤
- ‡πÄ‡∏™‡∏£‡∏¥‡∏°‡πÑ‡∏ó‡∏¢ ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏û‡∏•‡πá‡∏Å‡∏ã‡πå, ‡πÄ‡∏™‡∏£‡∏¥‡∏°‡πÑ‡∏ó‡∏¢ ‡∏û‡∏•‡∏≤‡∏ã‡πà‡∏≤ - ‡∏´‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
- ‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°, ‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏®‡∏£‡∏µ‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏° - ‡∏™‡∏ñ‡∏≤‡∏ö‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤
- ‡πÅ‡∏°‡πá‡∏Ñ‡πÇ‡∏Ñ‡∏£‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏° - ‡∏´‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
- ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏Ç‡∏ô‡∏™‡πà‡∏á‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏° - ‡∏Ç‡∏ô‡∏™‡πà‡∏á‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞
- ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏° (‡∏£‡∏û.‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°) - ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û

**‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:**
${dormContext}

**‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°:**
- ‡∏´‡∏≤‡∏Å‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤: ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏°‡∏µ (‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô ‡∏£‡∏≤‡∏¢‡πÄ‡∏ó‡∏≠‡∏°) ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥ ‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü
- ‡∏´‡∏≤‡∏Å‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà/‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå near_places ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏Å‡∏•‡πâ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
- ‡∏´‡∏≤‡∏Å‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å: ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏à‡∏≤‡∏Å facilities
- ‡∏´‡∏≤‡∏Å‡∏ñ‡∏≤‡∏°‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö: ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏´‡∏≠‡∏û‡∏±‡∏Å
- ‡∏´‡∏≤‡∏Å‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏´‡∏≠‡∏û‡∏±‡∏Å: ‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤ "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏â‡∏±‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô üè† ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏´‡∏≠‡∏û‡∏±‡∏Å‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞?"

**‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö:**
- ‡πÉ‡∏ä‡πâ emoji ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
- ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô ‡πÄ‡∏ä‡πà‡∏ô "‡∏ø3,500/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"
- ‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ ‡πÄ‡∏ä‡πà‡∏ô "‡πÉ‡∏Å‡∏•‡πâ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢" "‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"
- ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö 1-3 ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•

‡∏ï‡∏≠‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô`;

  try {
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ TLS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Certificate Error
    process.env["NODE_TLS_REJECT_UNAUTHORIZED"] = 0;
    
    const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userMessage }
        ],
        model: 'llama-3.1-8b-instant',
        max_tokens: 500,
        temperature: 0.7
      })
    });

    if (response.ok) {
      const data = await response.json();
      return data.choices[0].message.content;
    } else {
      const errorText = await response.text();
      console.error('Groq API Error:', response.status, errorText);
      return null;
    }
  } catch (error) {
    console.error('Groq API Network Error:', error);
    return null;
  }
}

// Chatbot API endpoint
app.post('/chatbot', async (req, res) => {
  try {
    const { message, conversationId } = req.body;

    if (!message || message.trim() === '') {
      return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏≤' });
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const dormQuery = `
      SELECT id, name, price_daily, price_monthly, price_term, 
             address_detail, facilities, near_places, 
             water_cost, electricity_cost, contact_phone
      FROM dorms WHERE status = 'approved' ORDER BY name
    `;

    const dorms = await new Promise((resolve, reject) => {
      pool.query(dormQuery, (err, results) => {
        if (err) reject(err);
        else resolve(results);
      });
    });

    // ‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö simple rule-based ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
    const simple = answerSimpleQuery(message, dorms);
    if (simple) {
      return res.json({
        message: simple,
        conversationId: conversationId || Date.now().toString(),
        timestamp: new Date().toISOString(),
        source: 'rule'
      });
    }

    // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡πà‡∏≠ context
    const filteredDorms = filterDormsForQuery(message, dorms);
    const dormContext = buildDormContext(filteredDorms);

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Groq AI ‡∏û‡∏£‡πâ‡∏≠‡∏° context ‡∏ó‡∏µ‡πà‡∏¢‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß
    const aiResponse = await callGroqAI(message.trim(), dormContext);

    if (aiResponse) {
      // ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å AI
      res.json({
        message: aiResponse,
        conversationId: conversationId || Date.now().toString(),
        timestamp: new Date().toISOString(),
        source: 'groq-ai'
      });
    } else {
      // Fallback ‡∏ñ‡πâ‡∏≤ AI ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ
      const fallbackMessage = `ü§ñ ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß

‡πÅ‡∏ï‡πà‡∏â‡∏±‡∏ô‡∏¢‡∏±‡∏á‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ! ‡∏°‡∏µ‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${dorms.length} ‡πÅ‡∏´‡πà‡∏á

üí° **‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏î‡∏π‡∏Ñ‡πà‡∏∞:**
‚Ä¢ "‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡∏π‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î"
‚Ä¢ "‡∏´‡∏≠‡∏û‡∏±‡∏Å‡πÉ‡∏Å‡∏•‡πâ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢" 
‚Ä¢ "‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ WiFi"
‚Ä¢ "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏î‡∏µ‡πÜ"

üè† ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞!`;

      res.json({
        message: fallbackMessage,
        conversationId: conversationId || Date.now().toString(),
        timestamp: new Date().toISOString(),
        source: 'fallback'
      });
    }

  } catch (error) {
    console.error('Chatbot API error:', error);
    res.status(500).json({ 
      error: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
      message: 'ü§ñ ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÅ‡∏ó‡∏ô‡∏Ñ‡πà‡∏∞ üòä'
    });
  }
});

// ==================== ROOM MANAGEMENT ENDPOINTS ====================

/**
 * Get all rooms for a specific dorm
 * @route GET /dorms/:dormId/rooms
 * @param {string} dormId - ID of the dorm
 * @returns {Array} List of rooms
 */
app.get('/dorms/:dormId/rooms', authOwner, (req, res) => {
  const { dormId } = req.params;
  const ownerId = req.user.id;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  pool.query('SELECT id FROM dorms WHERE id = ? AND owner_id = ?', [dormId, ownerId], (err, results) => {
    if (err) {
      console.error('Database error:', err);
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
    }

    if (results.length === 0) {
      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á' });
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å
    pool.query('SELECT * FROM rooms WHERE dorm_id = ? ORDER BY floor, room_number', [dormId], (err, rooms) => {
      if (err) {
        console.error('Database error:', err);
        return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å' });
      }

      res.json(rooms);
    });
  });
});

/**
 * Add new room to a dorm
 * @route POST /dorms/:dormId/rooms
 * @param {string} dormId - ID of the dorm
 * @param {Object} roomData - Room information
 * @returns {Object} Success message and room ID
 */
app.post('/dorms/:dormId/rooms', authOwner, (req, res) => {
  const { dormId } = req.params;
  const ownerId = req.user.id;
  const {
    room_number,
    floor,
    price_daily,
    price_monthly,
    price_term,
    room_type,
    is_occupied,
    tenant_name,
    tenant_phone,
    move_in_date,
    notes
  } = req.body;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
  if (!room_number || !floor) {
    return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏ä‡∏±‡πâ‡∏ô' });
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  pool.query('SELECT id FROM dorms WHERE id = ? AND owner_id = ?', [dormId, ownerId], (err, results) => {
    if (err) {
      console.error('Database error:', err);
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
    }

    if (results.length === 0) {
      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á' });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡πâ‡∏≠‡∏á‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    pool.query('SELECT id FROM rooms WHERE dorm_id = ? AND room_number = ?', [dormId, room_number], (err, existingRooms) => {
      if (err) {
        console.error('Database error:', err);
        return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
      }

      if (existingRooms.length > 0) {
        return res.status(400).json({ error: '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏´‡∏≠‡∏û‡∏±‡∏Å' });
      }

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡πÉ‡∏´‡∏°‡πà
      const roomData = {
        dorm_id: dormId,
        room_number,
        floor: parseInt(floor),
        price_daily: price_daily ? parseFloat(price_daily) : null,
        price_monthly: price_monthly ? parseFloat(price_monthly) : null,
        price_term: price_term ? parseFloat(price_term) : null,
        room_type: room_type || 'air_conditioner',
        is_occupied: is_occupied || false,
        tenant_name: tenant_name || null,
        tenant_phone: tenant_phone || null,
        move_in_date: move_in_date || null,
        notes: notes || null,
        created_at: new Date()
      };

      pool.query('INSERT INTO rooms SET ?', roomData, (err, result) => {
        if (err) {
          console.error('Database error:', err);
          return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å' });
        }

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å
        pool.query('UPDATE dorms SET room_count = (SELECT COUNT(*) FROM rooms WHERE dorm_id = ?) WHERE id = ?', 
          [dormId, dormId], (updateErr) => {
          if (updateErr) {
            console.error('Error updating room count:', updateErr);
            // ‡πÑ‡∏°‡πà return error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏Ñ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï count
          }
        });

        res.json({ 
          message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
          roomId: result.insertId
        });
      });
    });
  });
});

/**
 * Update room information
 * @route PUT /dorms/:dormId/rooms/:roomId
 * @param {string} dormId - ID of the dorm
 * @param {string} roomId - ID of the room
 * @param {Object} roomData - Updated room information
 * @returns {Object} Success message
 */
app.put('/dorms/:dormId/rooms/:roomId', authOwner, (req, res) => {
  const { dormId, roomId } = req.params;
  const ownerId = req.user.id;
  const {
    room_number,
    floor,
    price_daily,
    price_monthly,
    price_term,
    room_type,
    is_occupied,
    tenant_name,
    tenant_phone,
    move_in_date,
    notes
  } = req.body;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
  if (!room_number || !floor) {
    return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏ä‡∏±‡πâ‡∏ô' });
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  pool.query('SELECT id FROM dorms WHERE id = ? AND owner_id = ?', [dormId, ownerId], (err, results) => {
    if (err) {
      console.error('Database error:', err);
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
    }

    if (results.length === 0) {
      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á' });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    pool.query('SELECT id FROM rooms WHERE id = ? AND dorm_id = ?', [roomId, dormId], (err, roomResults) => {
      if (err) {
        console.error('Database error:', err);
        return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
      }

      if (roomResults.length === 0) {
        return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å' });
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡πâ‡∏≠‡∏á‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
      pool.query('SELECT id FROM rooms WHERE dorm_id = ? AND room_number = ? AND id != ?', [dormId, room_number, roomId], (err, existingRooms) => {
        if (err) {
          console.error('Database error:', err);
          return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
        }

        if (existingRooms.length > 0) {
          return res.status(400).json({ error: '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏´‡∏≠‡∏û‡∏±‡∏Å' });
        }

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å
        const roomData = {
          room_number,
          floor: parseInt(floor),
          price_daily: price_daily ? parseFloat(price_daily) : null,
          price_monthly: price_monthly ? parseFloat(price_monthly) : null,
          price_term: price_term ? parseFloat(price_term) : null,
          room_type: room_type || 'air_conditioner',
          is_occupied: is_occupied || false,
          tenant_name: tenant_name || null,
          tenant_phone: tenant_phone || null,
          move_in_date: move_in_date || null,
          notes: notes || null,
          updated_at: new Date()
        };

        pool.query('UPDATE rooms SET ? WHERE id = ?', [roomData, roomId], (err) => {
          if (err) {
            console.error('Database error:', err);
            return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å' });
          }

          res.json({ message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
        });
      });
    });
  });
});

/**
 * Delete room
 * @route DELETE /dorms/:dormId/rooms/:roomId
 * @param {string} dormId - ID of the dorm
 * @param {string} roomId - ID of the room
 * @returns {Object} Success message
 */
app.delete('/dorms/:dormId/rooms/:roomId', authOwner, (req, res) => {
  const { dormId, roomId } = req.params;
  const ownerId = req.user.id;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  pool.query('SELECT id FROM dorms WHERE id = ? AND owner_id = ?', [dormId, ownerId], (err, results) => {
    if (err) {
      console.error('Database error:', err);
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
    }

    if (results.length === 0) {
      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á' });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    pool.query('SELECT id FROM rooms WHERE id = ? AND dorm_id = ?', [roomId, dormId], (err, roomResults) => {
      if (err) {
        console.error('Database error:', err);
        return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
      }

      if (roomResults.length === 0) {
        return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å' });
      }

      // ‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å
      pool.query('DELETE FROM rooms WHERE id = ?', [roomId], (err) => {
        if (err) {
          console.error('Database error:', err);
          return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å' });
        }

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å
        pool.query('UPDATE dorms SET room_count = (SELECT COUNT(*) FROM rooms WHERE dorm_id = ?) WHERE id = ?', 
          [dormId, dormId], (updateErr) => {
          if (updateErr) {
            console.error('Error updating room count:', updateErr);
            // ‡πÑ‡∏°‡πà return error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏´‡πâ‡∏≠‡∏á‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏Ñ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï count
          }
        });

        res.json({ message: '‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
      });
    });
  });
});

/**
 * Update room utility usage (electricity and water)
 * @route PUT /dorms/:dormId/rooms/:roomId/utilities
 * @param {string} dormId - ID of the dorm
 * @param {string} roomId - ID of the room
 * @returns {Object} Success message
 */
app.put('/dorms/:dormId/rooms/:roomId/utilities', authOwner, (req, res) => {
  const { dormId, roomId } = req.params;
  const ownerId = req.user.id;
  const {
    electricity_meter_old,
    electricity_meter_new,
    water_meter_old,
    water_meter_new,
    electricity_rate,
    water_rate,
    electricity_notes,
    water_notes,
    meter_reading_date
  } = req.body;

  console.log('=== UTILITIES UPDATE REQUEST ===');
  console.log('User ID:', ownerId);
  console.log('Dorm ID:', dormId);
  console.log('Room ID:', roomId);
  console.log('Request body:', req.body);

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≠‡∏û‡∏±‡∏Å
  pool.query('SELECT * FROM dorms WHERE id = ? AND owner_id = ?', [dormId, ownerId], (err, dormResults) => {
    if (err) {
      console.error('Database error in dorms query:', err);
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
    }

    if (dormResults.length === 0) {
      console.log('Dorm not found or access denied:', { dormId, ownerId });
      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á' });
    }

    const dorm = dormResults[0];
    console.log('Found dorm:', { id: dorm.id, name: dorm.name });
    const dormElectricityRate = dorm.electricity_cost || 0;
    const dormWaterRate = dorm.water_cost || 0;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    pool.query('SELECT * FROM rooms WHERE id = ? AND dorm_id = ?', [roomId, dormId], (err, roomResults) => {
      if (err) {
        console.error('Database error in rooms query:', err);
        return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
      }

      if (roomResults.length === 0) {
        console.log('Room not found:', { roomId, dormId });
        return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å' });
      }

      const currentRoom = roomResults[0];
      console.log('Found room:', { id: currentRoom.id, room_number: currentRoom.room_number });

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πà‡∏≤-‡πÉ‡∏´‡∏°‡πà
      const electricityUsage = electricity_meter_new && electricity_meter_old ? 
        parseFloat(electricity_meter_new) - parseFloat(electricity_meter_old) : 0;
      const waterUsage = water_meter_new && water_meter_old ? 
        parseFloat(water_meter_new) - parseFloat(water_meter_old) : 0;

      // ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
      if (electricity_meter_new || water_meter_new) {
        pool.query(
          `INSERT INTO meter_readings (
            room_id, reading_date, 
            electricity_meter_old, electricity_meter_new, electricity_rate, electricity_usage,
            water_meter_old, water_meter_new, water_rate, water_usage,
            electricity_notes, water_notes, created_by
          ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            roomId,
            meter_reading_date || new Date().toISOString().split('T')[0],
            electricity_meter_old || 0,
            electricity_meter_new || 0,
            dormElectricityRate,
            electricityUsage,
            water_meter_old || 0,
            water_meter_new || 0,
            dormWaterRate,
            waterUsage,
            electricity_notes || '',
            water_notes || '',
            req.user.firstName || '‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å'
          ],
          (err) => {
            if (err) {
              console.error('Error saving meter reading history:', err);
            }
          }
        );
      }

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏π‡∏õ‡πÇ‡∏†‡∏Ñ (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° rate ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏≠‡∏û‡∏±‡∏Å)
      const utilityData = {};
      if (electricity_meter_old !== undefined) utilityData.electricity_meter_old = parseFloat(electricity_meter_old) || 0;
      if (electricity_meter_new !== undefined) utilityData.electricity_meter_new = parseFloat(electricity_meter_new) || 0;
      if (water_meter_old !== undefined) utilityData.water_meter_old = parseFloat(water_meter_old) || 0;
      if (water_meter_new !== undefined) utilityData.water_meter_new = parseFloat(water_meter_new) || 0;
      // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: electricity_rate ‡πÅ‡∏•‡∏∞ water_rate ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏≠‡∏û‡∏±‡∏Å
      if (electricity_notes !== undefined) utilityData.electricity_notes = electricity_notes;
      if (water_notes !== undefined) utilityData.water_notes = water_notes;
      if (meter_reading_date !== undefined) utilityData.meter_reading_date = meter_reading_date;

      if (Object.keys(utilityData).length > 0) {
        utilityData.updated_at = new Date();

        pool.query('UPDATE rooms SET ? WHERE id = ?', [utilityData, roomId], (err) => {
          if (err) {
            console.error('Database error in UPDATE rooms:', err);
            console.error('Query data:', utilityData);
            console.error('Room ID:', roomId);
            return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏π‡∏õ‡πÇ‡∏†‡∏Ñ' });
          }

          console.log('Successfully updated utilities for room:', roomId);
          res.json({ message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏π‡∏õ‡πÇ‡∏†‡∏Ñ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
        });
      } else {
        res.json({ message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï' });
      }
    });
  });
});

/**
 * Get room utility usage history
 * @route GET /dorms/:dormId/rooms/:roomId/utilities/history
 * @param {string} dormId - ID of the dorm
 * @param {string} roomId - ID of the room
 * @returns {Array} Utility usage history
 */
app.get('/dorms/:dormId/rooms/:roomId/utilities/history', authOwner, (req, res) => {
  const { dormId, roomId } = req.params;
  const ownerId = req.user.id;

  console.log('=== UTILITIES HISTORY REQUEST ===');
  console.log('User ID:', ownerId);
  console.log('Dorm ID:', dormId);
  console.log('Room ID:', roomId);

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  pool.query('SELECT id FROM dorms WHERE id = ? AND owner_id = ?', [dormId, ownerId], (err, results) => {
    if (err) {
      console.error('Database error in dorm check:', err);
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
    }

    console.log('Dorm check results:', results);

    if (results.length === 0) {
      console.log('Dorm not found or access denied');
      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á' });
    }

    console.log('Fetching meter readings for room:', roomId);

    // ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
    pool.query(
      `SELECT 
        reading_date,
        electricity_meter_old,
        electricity_meter_new,
        electricity_rate,
        electricity_usage,
        water_meter_old,
        water_meter_new,
        water_rate,
        water_usage,
        electricity_notes,
        water_notes,
        created_by,
        created_at
      FROM meter_readings 
      WHERE room_id = ? 
      ORDER BY reading_date DESC, created_at DESC`,
      [roomId],
      (err, historyResults) => {
        if (err) {
          console.error('Database error in meter readings query:', err);
          return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥' });
        }

        console.log('History results:', historyResults);
        console.log('Results count:', historyResults.length);
        res.json(historyResults);
      }
    );
  });
});

// ==================== REVIEWS API ENDPOINTS ====================

/**
 * Get reviews for a specific dorm
 * @route GET /dorms/:dormId/reviews
 */
app.get('/dorms/:dormId/reviews', async (req, res) => {
  const { dormId } = req.params;
  
  try {
    pool.query(
      `SELECT r.*, c.name as customer_name 
       FROM reviews r 
       LEFT JOIN customers c ON r.customer_id = c.id 
       WHERE r.dorm_id = ? 
       ORDER BY r.created_at DESC`,
      [dormId],
      (err, results) => {
        if (err) {
          console.error('Database error:', err);
          return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß' });
        }
        res.json(results);
      }
    );
  } catch (error) {
    console.error('Error fetching reviews:', error);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß' });
  }
});

/**
 * Get review statistics for a specific dorm
 * @route GET /dorms/:dormId/reviews/stats
 */
app.get('/dorms/:dormId/reviews/stats', async (req, res) => {
  const { dormId } = req.params;
  
  try {
    pool.query(
      `SELECT 
        COUNT(*) as total_reviews,
        AVG(rating) as average_rating,
        AVG(cleanliness_rating) as avg_cleanliness,
        AVG(location_rating) as avg_location,
        AVG(value_rating) as avg_value,
        AVG(service_rating) as avg_service
       FROM reviews 
       WHERE dorm_id = ?`,
      [dormId],
      (err, results) => {
        if (err) {
          console.error('Database error:', err);
          return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏µ‡∏ß‡∏¥‡∏ß' });
        }
        
        const stats = results[0];
        // Convert averages to 2 decimal places
        if (stats.average_rating) {
          stats.average_rating = parseFloat(stats.average_rating).toFixed(1);
        }
        if (stats.avg_cleanliness) {
          stats.avg_cleanliness = parseFloat(stats.avg_cleanliness).toFixed(1);
        }
        if (stats.avg_location) {
          stats.avg_location = parseFloat(stats.avg_location).toFixed(1);
        }
        if (stats.avg_value) {
          stats.avg_value = parseFloat(stats.avg_value).toFixed(1);
        }
        if (stats.avg_service) {
          stats.avg_service = parseFloat(stats.avg_service).toFixed(1);
        }
        
        res.json(stats);
      }
    );
  } catch (error) {
    console.error('Error fetching review stats:', error);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏µ‡∏ß‡∏¥‡∏ß' });
  }
});

/**
 * Create a new review for a dorm
 * @route POST /dorms/:dormId/reviews
 */
app.post('/dorms/:dormId/reviews', verifyToken, async (req, res) => {
  const { dormId } = req.params;
  const { rating, comment, cleanliness_rating, location_rating, value_rating, service_rating } = req.body;
  const customerId = req.user.id;
  
  // Validation
  if (!rating || !comment || rating < 1 || rating > 5) {
    return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô' });
  }
  
  if (!cleanliness_rating || !location_rating || !value_rating || !service_rating) {
    return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà' });
  }
  
  try {
    // Check if user already reviewed this dorm
    pool.query(
      'SELECT id FROM reviews WHERE dorm_id = ? AND customer_id = ?',
      [dormId, customerId],
      (err, existing) => {
        if (err) {
          console.error('Database error:', err);
          return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß' });
        }
        
        if (existing.length > 0) {
          return res.status(400).json({ error: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß' });
        }
        
        // Insert new review
        pool.query(
          `INSERT INTO reviews (dorm_id, customer_id, rating, comment, cleanliness_rating, location_rating, value_rating, service_rating, created_at) 
           VALUES (?, ?, ?, ?, ?, ?, ?, ?, NOW())`,
          [dormId, customerId, rating, comment, cleanliness_rating, location_rating, value_rating, service_rating],
          (err, result) => {
            if (err) {
              console.error('Database error:', err);
              return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏µ‡∏ß‡∏¥‡∏ß' });
            }
            
            res.status(201).json({ 
              message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
              reviewId: result.insertId 
            });
          }
        );
      }
    );
  } catch (error) {
    console.error('Error creating review:', error);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏µ‡∏ß‡∏¥‡∏ß' });
  }
});

/**
 * Update an existing review
 * @route PUT /reviews/:reviewId
 */
app.put('/reviews/:reviewId', verifyToken, async (req, res) => {
  const { reviewId } = req.params;
  const { rating, comment, cleanliness_rating, location_rating, value_rating, service_rating } = req.body;
  const customerId = req.user.id;
  
  // Validation
  if (!rating || !comment || rating < 1 || rating > 5) {
    return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô' });
  }
  
  try {
    // Check if review belongs to the user
    pool.query(
      'SELECT customer_id FROM reviews WHERE id = ?',
      [reviewId],
      (err, result) => {
        if (err) {
          console.error('Database error:', err);
          return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß' });
        }
        
        if (result.length === 0) {
          return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' });
        }
        
        if (result[0].customer_id !== customerId) {
          return res.status(403).json({ error: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ô‡∏µ‡πâ' });
        }
        
        // Update review
        pool.query(
          `UPDATE reviews 
           SET rating = ?, comment = ?, cleanliness_rating = ?, location_rating = ?, value_rating = ?, service_rating = ?, updated_at = NOW()
           WHERE id = ?`,
          [rating, comment, cleanliness_rating, location_rating, value_rating, service_rating, reviewId],
          (err) => {
            if (err) {
              console.error('Database error:', err);
              return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏µ‡∏ß‡∏¥‡∏ß' });
            }
            
            res.json({ message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
          }
        );
      }
    );
  } catch (error) {
    console.error('Error updating review:', error);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏µ‡∏ß‡∏¥‡∏ß' });
  }
});

/**
 * Delete a review
 * @route DELETE /reviews/:reviewId
 */
app.delete('/reviews/:reviewId', verifyToken, async (req, res) => {
  const { reviewId } = req.params;
  const customerId = req.user.id;
  
  try {
    // Check if review belongs to the user
    pool.query(
      'SELECT customer_id FROM reviews WHERE id = ?',
      [reviewId],
      (err, result) => {
        if (err) {
          console.error('Database error:', err);
          return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß' });
        }
        
        if (result.length === 0) {
          return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö' });
        }
        
        if (result[0].customer_id !== customerId) {
          return res.status(403).json({ error: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ô‡∏µ‡πâ' });
        }
        
        // Delete review
        pool.query(
          'DELETE FROM reviews WHERE id = ?',
          [reviewId],
          (err) => {
            if (err) {
              console.error('Database error:', err);
              return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß' });
            }
            
            res.json({ message: '‡∏•‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
          }
        );
      }
    );
  } catch (error) {
    console.error('Error deleting review:', error);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß' });
  }
});

// ==================== METER READING MANAGEMENT ====================

// ‡∏°‡∏≤‡∏ï‡∏£‡∏ß‡∏±‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡πÑ‡∏ü - ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
app.get('/meter-readings/:roomId', (req, res) => {
    const { roomId } = req.params;

    // ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
    pool.query(
      'SELECT * FROM meter_readings WHERE room_id = ? ORDER BY reading_date DESC, created_at DESC LIMIT 50',
      [roomId],
      (err, readings) => {
        if (err) {
          console.error('Database error:', err);
          return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥' });
        }

        res.json(readings);
      }
    );
});

// ==================== LOCATION COORDINATES API ENDPOINTS ====================
/**
 * ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏≠‡∏û‡∏±‡∏Å
 * @route POST /dorms/:dormId/nearby-locations
 */
app.post('/dorms/:dormId/nearby-locations', authOwner, (req, res) => {
  const { dormId } = req.params;
  const { location_type, location_name, latitude, longitude, description, distance_km } = req.body;
  
  const sql = 'INSERT INTO location_coordinates (dorm_id, location_type, location_name, latitude, longitude, description, distance_km) VALUES (?, ?, ?, ?, ?, ?, ?)';
  
  pool.query(sql, [dormId, location_type, location_name, latitude, longitude, description, distance_km], (err, result) => {
    if (err) return res.status(500).json({ error: err.message });
    res.json({ 
      success: true, 
      location_id: result.insertId,
      message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
    });
  });
});

/**
 * ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å
 * @route GET /dorms/:dormId/nearby-locations
 */
app.get('/dorms/:dormId/nearby-locations', (req, res) => {
  const { dormId } = req.params;
  const { location_type } = req.query;
  
  let sql = `
    SELECT 
      lc.*,
      d.name AS dorm_name
    FROM location_coordinates lc
    LEFT JOIN dorms d ON lc.dorm_id = d.id
    WHERE lc.dorm_id = ?
  `;
  
  const params = [dormId];
  
  if (location_type) {
    sql += ' AND lc.location_type = ?';
    params.push(location_type);
  }
  
  sql += ' ORDER BY lc.location_type, lc.distance_km';
  
  pool.query(sql, params, (err, results) => {
    if (err) return res.status(500).json({ error: err.message });
    res.json(results);
  });
});

/**
 * ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
 * @route PUT /nearby-locations/:locationId
 */
app.put('/nearby-locations/:locationId', authOwner, (req, res) => {
  const { locationId } = req.params;
  const { location_type, location_name, latitude, longitude, description, distance_km } = req.body;
  
  const sql = 'UPDATE location_coordinates SET location_type = ?, location_name = ?, latitude = ?, longitude = ?, description = ?, distance_km = ? WHERE id = ?';
  
  pool.query(sql, [location_type, location_name, latitude, longitude, description, distance_km, locationId], (err, result) => {
    if (err) return res.status(500).json({ error: err.message });
    if (result.affectedRows === 0) return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' });
    res.json({ success: true, message: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  });
});

/**
 * ‡∏•‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
 * @route DELETE /nearby-locations/:locationId
 */
app.delete('/nearby-locations/:locationId', authOwner, (req, res) => {
  const { locationId } = req.params;
  
  const sql = 'DELETE FROM location_coordinates WHERE id = ?';
  
  pool.query(sql, [locationId], (err, result) => {
    if (err) return res.status(500).json({ error: err.message });
    if (result.affectedRows === 0) return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö' });
    res.json({ success: true, message: '‡∏•‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  });
});

/**
 * ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
 * @route GET /search/dorms-by-location
 */
app.get('/search/dorms-by-location', (req, res) => {
  const { location_type, max_distance, latitude, longitude } = req.query;
  
  let sql = `
    SELECT DISTINCT 
      d.*,
      GROUP_CONCAT(
        CONCAT(lc.location_type, ':', lc.location_name, ':', lc.distance_km) 
        ORDER BY lc.distance_km SEPARATOR ';'
      ) AS nearby_locations,
      COUNT(DISTINCT lc.id) AS location_count
    FROM dorms d
    LEFT JOIN location_coordinates lc ON d.id = lc.dorm_id
    WHERE d.status = 'approved'
  `;
  
  const params = [];
  
  if (location_type) {
    sql += ' AND lc.location_type = ?';
    params.push(location_type);
  }
  
  if (max_distance) {
    sql += ' AND lc.distance_km <= ?';
    params.push(max_distance);
  }
  
  sql += ' GROUP BY d.id ORDER BY location_count DESC, d.name';
  
  pool.query(sql, params, (err, results) => {
    if (err) return res.status(500).json({ error: err.message });
    res.json(results);
  });
});

/**
 * ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
 * @route GET /locations/by-type/:locationType
 */
app.get('/locations/by-type/:locationType', (req, res) => {
  const { locationType } = req.params;
  
  const sql = `
    SELECT 
      lc.*,
      d.name AS dorm_name,
      d.address_detail AS dorm_address
    FROM location_coordinates lc
    LEFT JOIN dorms d ON lc.dorm_id = d.id
    WHERE lc.location_type = ?
    ORDER BY lc.location_name, lc.distance_km
  `;
  
  pool.query(sql, [locationType], (err, results) => {
    if (err) return res.status(500).json({ error: err.message });
    res.json(results);
  });
});

// ==================== CHATBOT API ====================

// Helper: ‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÑ‡∏ó‡∏¢ -> ‡∏≠‡∏≤‡∏£‡∏ö‡∏¥‡∏Å (‡∏´‡∏¢‡∏≤‡∏ö‡πÜ)
function normalizeThaiNumerals(str = '') {
  const map = { '‡πê':'0','‡πë':'1','‡πí':'2','‡πì':'3','‡πî':'4','‡πï':'5','‡πñ':'6','‡πó':'7','‡πò':'8','‡πô':'9' };
  return str.replace(/[‡πê-‡πô]/g, d => map[d] || d);
}

// Helper: ‡∏´‡∏≤ price (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç) ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
function extractBudget(message) {
  const norm = normalizeThaiNumerals(message).replace(/[, ]+/g,'');
  const m = norm.match(/(\d{3,6})/); // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏°‡∏±‡∏Å‡∏≠‡∏¢‡∏π‡πà‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏µ‡πâ
  return m ? parseInt(m[1], 10) : null;
}

// Helper: ‡∏Å‡∏£‡∏≠‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏ß‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå)
function filterDormsForQuery(message, dorms) {
  const msg = message.toLowerCase();
  const budget = extractBudget(msg);
  let results = [...dorms];

  // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏á‡∏ö ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏∏
  if (budget) {
    results = results.filter(d => {
      const prices = [d.price_monthly, d.price_daily, d.price_term]
        .filter(p => p && !isNaN(p))
        .map(Number);
      if (prices.length === 0) return false;
      return prices.some(p => p <= budget);
    });
  }

  // ‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å
  const facilityKeywords = ['wifi','‡πÑ‡∏ß‡πÑ‡∏ü','internet','‡πÅ‡∏≠‡∏£‡πå','air','‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏®','‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏ô‡∏¥‡πÄ‡∏à‡∏≠‡∏£‡πå','‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏î‡∏£‡∏ñ','parking','‡∏•‡∏¥‡∏ü‡∏ï‡πå','cctv'];
  const matchedFacilities = facilityKeywords.filter(k => msg.includes(k));
  if (matchedFacilities.length) {
    results = results.filter(d => (d.facilities||'').toLowerCase().includes(
      matchedFacilities[0] // ‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å‡∏û‡∏≠
    ));
  }

  // ‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á (‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ ‡πÉ‡∏Å‡∏•‡πâ / near)
  if (/‡πÉ‡∏Å‡∏•‡πâ|near|‡πÅ‡∏ñ‡∏ß|‡∏•‡∏∞‡πÅ‡∏ß‡∏Å/.test(msg)) {
    // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏´‡∏•‡∏±‡∏á "‡πÉ‡∏Å‡∏•‡πâ" ‡∏´‡∏£‡∏∑‡∏≠ "‡πÅ‡∏ñ‡∏ß" ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏´‡∏¢‡∏≤‡∏ö
    const placeMatch = msg.match(/(?:‡πÉ‡∏Å‡∏•‡πâ|‡πÅ‡∏ñ‡∏ß|near)\s*([\u0E00-\u0E7Fa-zA-Z0-9]+)/);
    if (placeMatch) {
      const token = placeMatch[1];
      results = results.filter(d => (d.near_places||'').toLowerCase().includes(token));
    }
  }

  // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô context ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô (‡πÄ‡∏ä‡πà‡∏ô 15 ‡πÅ‡∏£‡∏Å) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î token
  return results.slice(0, 15);
}

// Helper: ‡∏™‡∏£‡πâ‡∏≤‡∏á context (‡∏™‡∏±‡πâ‡∏ô‡∏•‡∏á) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•
function buildDormContext(dorms) {
  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å‡∏ñ‡∏π‡∏Å‡πÑ‡∏õ‡πÅ‡∏û‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ AI
  const sortedDorms = [...dorms].sort((a, b) => {
    // ‡∏´‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏≠
    const pricesA = [a.price_monthly, a.price_daily, a.price_term].filter(p => p && Number(p) > 0).map(Number);
    const pricesB = [b.price_monthly, b.price_daily, b.price_term].filter(p => p && Number(p) > 0).map(Number);
    
    const minPriceA = pricesA.length > 0 ? Math.min(...pricesA) : Infinity;
    const minPriceB = pricesB.length > 0 ? Math.min(...pricesB) : Infinity;
    
    return minPriceA - minPriceB;
  });

  return sortedDorms.map(dorm => {
    const prices = [];
    if (dorm.price_monthly) prices.push(`‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ${dorm.price_monthly}`);
    if (dorm.price_daily) prices.push(`‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô ${dorm.price_daily}`);
    if (dorm.price_term) prices.push(`‡∏£‡∏≤‡∏¢‡πÄ‡∏ó‡∏≠‡∏° ${dorm.price_term}`);
    return `‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏≠: ${dorm.name}\n‡∏£‡∏≤‡∏Ñ‡∏≤: ${prices.join(' | ') || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: ${dorm.address_detail || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n‡πÉ‡∏Å‡∏•‡πâ: ${dorm.near_places || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å: ${dorm.facilities || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥/‡πÑ‡∏ü: ${dorm.water_cost || '-'} / ${dorm.electricity_cost || '-'}\n‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠: ${dorm.contact_phone || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`;
  }).join('\n\n');
}

// Helper: ‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö rule-based ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏á‡πà‡∏≤‡∏¢ ‡∏•‡∏î‡∏†‡∏≤‡∏£‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏•
function answerSimpleQuery(message, dorms) {
  const msg = message.toLowerCase();
  
  // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  if (/‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡∏µ‡πà|‡∏Å‡∏µ‡πà‡∏´‡∏≠|‡∏Å‡∏µ‡πà‡πÅ‡∏´‡πà‡∏á|‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î/.test(msg) && /‡∏´‡∏≠/.test(msg)) {
    return `‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${dorms.length} ‡πÅ‡∏´‡πà‡∏á‡∏Ñ‡πà‡∏∞ üè†`;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏≤‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡∏π‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
  const cheapestResponse = answerCheapestDormQuery(message, dorms);
  if (cheapestResponse) {
    return cheapestResponse;
  }

  // ‡∏Ñ‡∏≥‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢
  if (/‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ|hello|hi|‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ/.test(msg)) {
    return '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ üòä ‡∏°‡∏µ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞?';
  }
  
  // ‡πÉ‡∏´‡πâ AI ‡∏ï‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
  return null;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
function filterInvalidResponse(aiResponse, dormContext) {
  try {
    // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const validDormNames = [];
    const dormLines = dormContext.split('\n');
    
    for (const line of dormLines) {
      if (line.includes('‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏≠:')) {
        const dormName = line.split('‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏≠:')[1]?.trim();
        if (dormName) {
          validDormNames.push(dormName);
        }
      }
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ
    const forbiddenWords = ['‡∏≠‡∏∑‡πà‡∏ô‡πÜ', '‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏´‡πà‡∏á', '‡∏°‡∏≤‡∏Å‡∏°‡∏≤‡∏¢', '‡πÄ‡∏ä‡πà‡∏ô', '‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô', '‡∏¢‡∏±‡∏á‡∏°‡∏µ'];
    const hasForbiddenWords = forbiddenWords.some(word => aiResponse.includes(word));
    
    if (hasForbiddenWords) {
      return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏ó‡∏ô‡∏Ñ‡πà‡∏∞";
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ AI ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏≠‡∏û‡∏±‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°
    if (validDormNames.length > 0) {
      const mentionsValidDorm = validDormNames.some(name => aiResponse.includes(name));
      const mentionsDorm = aiResponse.includes('‡∏´‡∏≠‡∏û‡∏±‡∏Å') || aiResponse.includes('‡∏´‡∏≠');
      
      // ‡∏ñ‡πâ‡∏≤‡∏û‡∏π‡∏î‡∏ñ‡∏∂‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      if (mentionsDorm && !mentionsValidDorm && !aiResponse.includes('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')) {
        return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö";
      }
    }
    
    return aiResponse;
    
  } catch (error) {
    console.error('Error filtering AI response:', error);
    return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á";
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Groq AI
async function callGroqAI(userMessage, dormContext) {
  const API_KEY = process.env.GROQ_API_KEY;
  
  if (!API_KEY) {
    console.warn('‚ö†Ô∏è GROQ_API_KEY not configured - using fallback response');
    return null; // ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö null ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£ throw error
  }

  const systemPrompt = `‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Smart Dorm üè†

**‡∏Å‡∏é‡∏ó‡∏µ‡πà‡∏´‡πâ‡∏≤‡∏°‡∏ù‡πà‡∏≤‡∏ù‡∏∑‡∏ô:**
- ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
- ‡∏´‡πâ‡∏≤‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á ‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏ï‡∏¥‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≤‡∏î‡πÄ‡∏î‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏î‡πÜ ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
- ‡∏´‡πâ‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
- ‡∏´‡πâ‡∏≤‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏≠‡∏û‡∏±‡∏Å ‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
- ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏£‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤ "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"

**‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≠‡∏û‡∏±‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ:**
${dormContext}

**‡∏ß‡∏¥‡∏ò‡∏µ‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:**
‚úÖ ‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
‚úÖ ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
‚úÖ ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏à‡∏≤‡∏Å facilities ‡∏ó‡∏µ‡πà‡∏°‡∏µ
‚úÖ ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å near_places ‡∏ó‡∏µ‡πà‡∏°‡∏µ

**‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:**
"‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏°‡∏µ‡∏´‡∏≠‡∏û‡∏±‡∏Å [‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•] ‡∏£‡∏≤‡∏Ñ‡∏≤ [‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•] ‡∏ö‡∏≤‡∏ó/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"

**‡∏´‡πâ‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ:**
‚ùå "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏Å‡∏•‡πâ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢"
‚ùå "‡∏°‡∏µ‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏´‡πà‡∏á‡πÉ‡∏Å‡∏•‡πâ‡∏°‡∏´‡∏≤‡∏•‡∏±‡∏¢"
‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏´‡πâ‡∏≤‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°`;

  try {
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ TLS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Certificate Error
    process.env["NODE_TLS_REJECT_UNAUTHORIZED"] = 0;
    
    const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        messages: [
          { role: 'system', content: systemPrompt },
          { 
            role: 'user', 
            content: `‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: ${userMessage}

**‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏î‡πá‡∏î‡∏Ç‡∏≤‡∏î:**
- ‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
- ‡∏´‡πâ‡∏≤‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏î‡πÜ ‡πÄ‡∏û‡∏¥‡πà‡∏°
- ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏≠‡∏∑‡πà‡∏ô‡πÜ" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏´‡πà‡∏á" 
- ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏£‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"

**‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô:**
${dormContext}

**‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:** "‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏°‡∏µ‡∏´‡∏≠‡∏û‡∏±‡∏Å [‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á] ‡∏£‡∏≤‡∏Ñ‡∏≤ [‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏£‡∏¥‡∏á] ‡∏ö‡∏≤‡∏ó"

‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô` 
          }
        ],
        model: 'llama-3.1-8b-instant',
        max_tokens: 300,  // ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô
        temperature: 0.1, // ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
        top_p: 0.5        // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
      })
    });

    if (response.ok) {
      const data = await response.json();
      let aiResponse = data.choices[0].message.content;
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á AI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      aiResponse = filterInvalidResponse(aiResponse, dormContext);
      
      console.log('Raw AI Response:', aiResponse);
      
      return aiResponse;
    } else {
      const errorText = await response.text();
      console.error('Groq API Error:', response.status, errorText);
      return null;
    }
  } catch (error) {
    console.error('Groq API Network Error:', error);
    return null;
  }
}

// Chatbot API endpoint
app.post('/chatbot', async (req, res) => {
  try {
    const { message, conversationId } = req.body;

    if (!message || message.trim() === '') {
      return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏≤' });
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const dormQuery = `
      SELECT id, name, price_daily, price_monthly, price_term, 
             address_detail, facilities, near_places, 
             water_cost, electricity_cost, contact_phone
      FROM dorms WHERE status = 'approved' ORDER BY name
    `;

    const dorms = await new Promise((resolve, reject) => {
      pool.query(dormQuery, (err, results) => {
        if (err) reject(err);
        else resolve(results);
      });
    });

    // ‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö simple rule-based ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
    const simple = answerSimpleQuery(message, dorms);
    if (simple) {
      return res.json({
        message: simple,
        conversationId: conversationId || Date.now().toString(),
        timestamp: new Date().toISOString(),
        source: 'rule'
      });
    }

    // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡πà‡∏≠ context
    const filteredDorms = filterDormsForQuery(message, dorms);
    const dormContext = buildDormContext(filteredDorms);

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Groq AI ‡∏û‡∏£‡πâ‡∏≠‡∏° context ‡∏ó‡∏µ‡πà‡∏¢‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß
    const aiResponse = await callGroqAI(message.trim(), dormContext);
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    console.log('AI Response:', aiResponse?.substring(0, 200) + '...');
    console.log('Dorm Context Length:', dormContext.length);

    if (aiResponse) {
      // ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å AI
      res.json({
        message: aiResponse,
        conversationId: conversationId || Date.now().toString(),
        timestamp: new Date().toISOString(),
        source: 'groq-ai'
      });
    } else {
      // Fallback ‡∏ñ‡πâ‡∏≤ AI ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ
      const fallbackMessage = `ü§ñ ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß

‡πÅ‡∏ï‡πà‡∏â‡∏±‡∏ô‡∏¢‡∏±‡∏á‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ! ‡∏°‡∏µ‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${dorms.length} ‡πÅ‡∏´‡πà‡∏á

üí° **‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏î‡∏π‡∏Ñ‡πà‡∏∞:**
‚Ä¢ "‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡∏π‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î"
‚Ä¢ "‡∏´‡∏≠‡∏û‡∏±‡∏Å‡πÉ‡∏Å‡∏•‡πâ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢" 
‚Ä¢ "‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ WiFi"
‚Ä¢ "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏î‡∏µ‡πÜ"

üè† ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞!`;

      res.json({
        message: fallbackMessage,
        conversationId: conversationId || Date.now().toString(),
        timestamp: new Date().toISOString(),
        source: 'fallback'
      });
    }

  } catch (error) {
    console.error('Chatbot API error:', error);
    res.status(500).json({ 
      error: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
      message: 'ü§ñ ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÅ‡∏ó‡∏ô‡∏Ñ‡πà‡∏∞ üòä'
    });
  }
});

// ==================== GEOAPIFY STATIC MAP API ====================
// API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Static Map URL
app.get('/api/static-map', (req, res) => {
  try {
    const { lat, lng, width = 300, height = 200, zoom = 15, style = 'osm-bright' } = req.query;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö parameters
    if (!lat || !lng) {
      return res.status(400).json({ 
        error: 'Missing required parameters: lat, lng' 
      });
    }
    
    const latitude = parseFloat(lat);
    const longitude = parseFloat(lng);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î
    if (isNaN(latitude) || isNaN(longitude) || 
        latitude < -90 || latitude > 90 || 
        longitude < -180 || longitude > 180) {
      return res.status(400).json({ 
        error: 'Invalid coordinates' 
      });
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Geoapify API Key
    const GEOAPIFY_API_KEY = process.env.GEOAPIFY_API_KEY;
    if (!GEOAPIFY_API_KEY) {
      return res.status(500).json({ 
        error: 'Geoapify API key not configured' 
      });
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Static Map URL
    const baseUrl = 'https://maps.geoapify.com/v1/staticmap';
    const params = new URLSearchParams({
      style: style,
      width: parseInt(width),
      height: parseInt(height),
      center: `lonlat:${longitude},${latitude}`,
      zoom: parseInt(zoom),
      marker: `lonlat:${longitude},${latitude};type:material;color:%23ff0000;size:large`,
      apiKey: GEOAPIFY_API_KEY
    });
    
    const staticMapUrl = `${baseUrl}?${params.toString()}`;
    
    res.json({
      success: true,
      url: staticMapUrl,
      coordinates: { latitude, longitude },
      parameters: { width: parseInt(width), height: parseInt(height), zoom: parseInt(zoom), style }
    });
    
  } catch (error) {
    console.error('Static Map API Error:', error);
    res.status(500).json({ 
      error: 'Internal server error',
      details: error.message 
    });
  }
});

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
const PORT = process.env.PORT || 3001;
server.listen(PORT, () => {
  console.log(`üöÄ Server running on port ${PORT}`);
  console.log(`üóÑÔ∏è  Database: MySQL`);
  console.log(`üåê API: http://localhost:${PORT}`);
  console.log(`üìÅ Static files: http://localhost:${PORT}/uploads`);
});