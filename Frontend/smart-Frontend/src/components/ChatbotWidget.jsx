import React, { useState, useRef, useEffect } from 'react';
import './ChatbotWidget.css';

const SUGGESTIONS = [
  { text: '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡∏π‡∏Å', icon: 'üè†', color: 'blue' },
  { text: '‡∏´‡∏≠‡∏û‡∏±‡∏Å‡πÉ‡∏Å‡∏•‡πâ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢', icon: 'üéì', color: 'green' },
  { text: '‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏°‡∏µ‡∏™‡∏£‡∏∞‡∏ß‡πà‡∏≤‡∏¢‡∏ô‡πâ‡∏≥', icon: 'üèä‚Äç‚ôÇÔ∏è', color: 'cyan' },
  { text: '‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏°‡∏µ‡∏•‡∏¥‡∏ü‡∏ï‡πå', icon: 'üîº', color: 'purple' },
  { text: '‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏´‡∏≠‡∏û‡∏±‡∏Å', icon: '‚≠ê', color: 'yellow' },
  { text: '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å', icon: 'ÔøΩ', color: 'orange' },
];

// Load conversation history from localStorage
const loadConversationHistory = () => {
  try {
    const saved = localStorage.getItem('chatbot_history');
    if (saved) {
      const parsed = JSON.parse(saved);
      // Add timestamp to old messages if they don't have it
      return parsed.map(msg => ({
        ...msg,
        timestamp: msg.timestamp ? new Date(msg.timestamp) : new Date()
      }));
    }
  } catch (error) {
    console.warn('Failed to load chat history:', error);
  }
  return [
    { 
      sender: 'bot', 
      text: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏â‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠ AI ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏Ç‡∏≠‡∏á Smart Dormitory üè†\n\n‡∏â‡∏±‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å ‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏Ñ‡πà‡∏∞ üòä\n\n‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞?',
      timestamp: new Date()
    }
  ];
};

// Save conversation history to localStorage
const saveConversationHistory = (messages) => {
  try {
    // Keep only last 50 messages to prevent localStorage from getting too large
    const messagesToSave = messages.slice(-50);
    localStorage.setItem('chatbot_history', JSON.stringify(messagesToSave));
  } catch (error) {
    console.warn('Failed to save chat history:', error);
  }
};

function ChatbotWidget({ onClose }) {
  const [messages, setMessages] = useState(loadConversationHistory);
  const [input, setInput] = useState('');
  const [loading, setLoading] = useState(false);
  const [chatContext, setChatContext] = useState({});
  const [connectionStatus, setConnectionStatus] = useState('checking');
  const messagesEndRef = useRef(null);

  // Check server connection status
  const checkServerStatus = async () => {
    try {
      setConnectionStatus('checking');
      const res = await fetch('http://localhost:3001/health', {
        method: 'GET',
        timeout: 5000
      });
      if (res.ok) {
        setConnectionStatus('online');
      } else {
        setConnectionStatus('offline');
      }
    // eslint-disable-next-line no-unused-vars
    } catch {
      setConnectionStatus('offline');
    }
  };

  useEffect(() => {
    checkServerStatus();
    // Check every 30 seconds
    const interval = setInterval(checkServerStatus, 30000);
    return () => clearInterval(interval);
  }, []);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Save messages whenever they change
  useEffect(() => {
    saveConversationHistory(messages);
  }, [messages]);

  // Auto-resize textarea
  const handleInputChange = (e) => {
    setInput(e.target.value);
    
    // Auto-resize textarea
    const textarea = e.target;
    textarea.style.height = 'auto';
    textarea.style.height = Math.min(textarea.scrollHeight, 80) + 'px';
  };

  const sendMessage = async (text) => {
    if (!text.trim()) return;
    
    const userMessage = { 
      sender: 'user', 
      text: text.trim(),
      timestamp: new Date()
    };
    
    setMessages(msgs => [...msgs, userMessage]);
    setInput('');
    setLoading(true);

    // Context handling
    let context = { ...chatContext };
    if (/‡∏≠‡∏µ‡∏Å|‡πÄ‡∏û‡∏¥‡πà‡∏°|‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πâ|‡πÑ‡∏´‡∏°|‡∏•‡πà‡∏∞|‡∏î‡πâ‡∏ß‡∏¢|‡πÅ‡∏•‡∏∞|‡∏´‡∏£‡∏∑‡∏≠|‡∏Ç‡∏≠|‡πÅ‡∏ö‡∏ö|‡πÑ‡∏´‡∏ô|‡∏≠‡∏∞‡πÑ‡∏£|‡∏¢‡∏±‡∏á‡πÑ‡∏á|‡∏≠‡∏µ‡∏Å‡∏ö‡πâ‡∏≤‡∏á|‡∏≠‡∏µ‡∏Å‡πÑ‡∏´‡∏°|‡∏≠‡∏µ‡∏Å‡∏°‡∏±‡πâ‡∏¢|‡∏≠‡∏µ‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡πà‡∏≤|‡∏≠‡∏µ‡∏Å‡∏´‡∏£‡∏∑‡∏≠/i.test(text)) {
      const prevUserMsg = messages.slice().reverse().find(m => m.sender === 'user');
      if (prevUserMsg) {
        context.lastUser = prevUserMsg.text;
        text = prevUserMsg.text + ' ' + text;
      }
    }
    setChatContext(context);

    try {
      const res = await fetch('http://localhost:3001/chatbot', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          message: text,
          conversationId: Date.now().toString()
        })
      });
      
      if (!res.ok) {
        throw new Error(`HTTP ${res.status}: ${res.statusText}`);
      }
      
      const data = await res.json();
      
      if (data.error) {
        throw new Error(data.error);
      }
      
      setMessages(msgs => [...msgs, { 
        sender: 'bot', 
        text: data.message || '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ',
        timestamp: new Date()
      }]);
      
    } catch (error) {
      console.error('Chatbot API error:', error);
      
      // ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö fallback ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      let fallbackMessage = '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß üòî\n\n';
      
      if (error.message.includes('Failed to fetch') || error.message.includes('NetworkError')) {
        fallbackMessage += 'üîÑ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï\nüì° ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Ñ‡πà‡∏∞';
      } else if (error.message.includes('500')) {
        fallbackMessage += '‚öôÔ∏è ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤\nüîß ‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ñ‡πà‡∏∞';
      } else if (error.message.includes('timeout')) {
        fallbackMessage += '‚è∞ ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ\nüöÄ ‡∏•‡∏≠‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡∏î‡∏π‡∏Ñ‡πà‡∏∞';
      } else {
        fallbackMessage += 'ÔøΩ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ:\n‚Ä¢ ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≠‡∏û‡∏±‡∏Å‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å\n‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏≠‡∏û‡∏±‡∏Å\n‚Ä¢ ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á';
      }
      
      setMessages(msgs => [...msgs, { 
        sender: 'bot', 
        text: fallbackMessage,
        timestamp: new Date(),
        isError: true
      }]);
    }
    
    setLoading(false);
  };

  const handleInputKeyDown = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage(input);
    }
  };

  const clearChatHistory = () => {
    if (window.confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
      const welcomeMessage = [
        { 
          sender: 'bot', 
          text: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏â‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠ AI ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏Ç‡∏≠‡∏á Smart Dormitory üè†\n\n‡∏â‡∏±‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å ‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏Ñ‡πà‡∏∞ üòä\n\n‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞?',
          timestamp: new Date()
        }
      ];
      setMessages(welcomeMessage);
      localStorage.removeItem('chatbot_history');
    }
  };

  const formatTime = (timestamp) => {
    return timestamp.toLocaleTimeString('th-TH', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  return (
    <div className="chatbot-widget">
      {/* Header */}
      <div className="chatbot-header">
        <div className="chatbot-header-content">
          <div className="chatbot-avatar">
            <div className="chatbot-avatar-inner">
              ü§ñ
            </div>
            <div className="chatbot-status-dot"></div>
          </div>
          <div className="chatbot-header-text">
            <h3>AI Assistant</h3>
            <p>
              Smart Dormitory Helper
              {connectionStatus === 'online' && <span className="status-indicator online"> ‚Ä¢ ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå</span>}
              {connectionStatus === 'offline' && <span className="status-indicator offline"> ‚Ä¢ ‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå</span>}
              {connectionStatus === 'checking' && <span className="status-indicator checking"> ‚Ä¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö...</span>}
            </p>
          </div>
        </div>
        <div className="chatbot-header-actions">
          <button
            className="chatbot-action-btn"
            onClick={clearChatHistory}
            title="‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤"
          >
            <svg width="16" height="16" fill="none" viewBox="0 0 24 24">
              <path stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" d="M4 7h16M10 11v6M14 11v6M5 7l1 12a2 2 0 002 2h8a2 2 0 002-2l1-12M9 7V4a1 1 0 011-1h4a1 1 0 011 1v3"/>
            </svg>
          </button>
          <button
            className="chatbot-close-btn"
            onClick={onClose}
            aria-label="‡∏õ‡∏¥‡∏î‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó"
          >
            <svg width="20" height="20" fill="none" viewBox="0 0 24 24">
              <path stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" d="M18 6 6 18M6 6l12 12"/>
            </svg>
          </button>
        </div>
      </div>

      {/* Messages */}
      <div className="chatbot-messages">
        {messages.map((msg, idx) => (
          <div key={idx} className={`chatbot-message-wrapper ${msg.sender}`}>
            <div className={`chatbot-message ${msg.sender} ${msg.isError ? 'error' : ''}`}>
              {msg.sender === 'bot' && (
                <div className="chatbot-bot-avatar">ü§ñ</div>
              )}
              <div className="chatbot-message-content">
                <div className="chatbot-message-text">
                  {msg.text.split('\n').map((line, i) => (
                    <div key={i}>{line}</div>
                  ))}
                </div>
                <div className="chatbot-message-time">
                  {formatTime(msg.timestamp)}
                </div>
                {msg.isError && (
                  <button 
                    className="retry-btn"
                    onClick={() => {
                      // ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á user ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î error
                      const userMsgIndex = messages.findIndex(m => m === msg) - 1;
                      if (userMsgIndex >= 0 && messages[userMsgIndex]?.sender === 'user') {
                        // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
                        setMessages(msgs => msgs.filter(m => m !== msg));
                        sendMessage(messages[userMsgIndex].text);
                      }
                    }}
                    disabled={loading}
                  >
                    üîÑ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
                  </button>
                )}
              </div>
            </div>
          </div>
        ))}
        {loading && (
          <div className="chatbot-message-wrapper bot">
            <div className="chatbot-message bot typing">
              <div className="chatbot-bot-avatar">ü§ñ</div>
              <div className="chatbot-message-content">
                <div className="typing-dots">
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
              </div>
            </div>
          </div>
        )}
        <div ref={messagesEndRef} />
      </div>

      {/* Quick Suggestions */}
      <div className="chatbot-suggestions">
        <div className="suggestions-label">üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</div>
        <div className="suggestions-grid">
          {SUGGESTIONS.map((suggestion, i) => (
            <button 
              key={i} 
              className={`chatbot-suggestion ${suggestion.color}`}
              onClick={() => sendMessage(suggestion.text)}
              disabled={loading}
            >
              <span className="suggestion-icon">{suggestion.icon}</span>
              <span className="suggestion-text">{suggestion.text}</span>
            </button>
          ))}
        </div>
      </div>

      {/* Input */}
      <div className="chatbot-input-container">
        <div className="chatbot-input-wrapper">
          <textarea
            className="chatbot-input"
            placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì..."
            value={input}
            onChange={handleInputChange}
            onKeyDown={handleInputKeyDown}
            disabled={loading}
            rows="1"
            style={{ resize: 'none', minHeight: '20px' }}
          />
          <button 
            className="chatbot-send-btn" 
            onClick={() => sendMessage(input)} 
            disabled={loading || !input.trim()}
          >
            {loading ? (
              <div className="loading-spinner"></div>
            ) : (
              <svg width="20" height="20" fill="none" viewBox="0 0 24 24">
                <path stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" d="M22 2 11 13M22 2l-7 20-4-9-9-4 20-7z"/>
              </svg>
            )}
          </button>
        </div>
        <div className="input-hint">
          ‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á, Shift+Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà
        </div>
      </div>
    </div>
  );
}

export default ChatbotWidget;
