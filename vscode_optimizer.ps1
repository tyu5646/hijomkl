# VS Code Performance Optimizer Script
# ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û VS Code

Write-Host "üöÄ VS Code Performance Optimizer" -ForegroundColor Cyan
Write-Host "================================" -ForegroundColor Cyan

# 1. ‡∏õ‡∏¥‡∏î VS Code ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
Write-Host "1. ‡∏õ‡∏¥‡∏î VS Code processes..." -ForegroundColor Yellow
Get-Process | Where-Object {$_.ProcessName -like "*Code*"} | Stop-Process -Force -ErrorAction SilentlyContinue
Start-Sleep -Seconds 3

# 2. ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î Cache
Write-Host "2. ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î Cache..." -ForegroundColor Yellow

# Cache paths
$userDataPath = $env:APPDATA + "\Code\User"
$cachePaths = @(
    $userDataPath + "\workspaceStorage",
    $userDataPath + "\logs",
    $userDataPath + "\CachedExtensions",
    $env:APPDATA + "\Code\CachedExtensions",
    $env:TEMP + "\vscode*"
)

foreach ($path in $cachePaths) {
    if (Test-Path $path) {
        Write-Host "   - ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î: $path" -ForegroundColor Gray
        if ($path -like "*workspaceStorage") {
            # ‡∏•‡∏ö workspace cache ‡πÄ‡∏Å‡πà‡∏≤ (‡∏≠‡∏≤‡∏¢‡∏∏ > 7 ‡∏ß‡∏±‡∏ô)
            Get-ChildItem $path -Directory -ErrorAction SilentlyContinue | 
                Where-Object {$_.LastWriteTime -lt (Get-Date).AddDays(-7)} | 
                Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
        } elseif ($path -like "*logs") {
            # ‡∏•‡∏ö log files ‡πÄ‡∏Å‡πà‡∏≤
            Get-ChildItem $path -File -ErrorAction SilentlyContinue | 
                Where-Object {$_.LastWriteTime -lt (Get-Date).AddDays(-3)} | 
                Remove-Item -Force -ErrorAction SilentlyContinue
        } else {
            # ‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            Remove-Item $path -Recurse -Force -ErrorAction SilentlyContinue
        }
    }
}

# 3. ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á settings ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö performance
Write-Host "3. ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á VS Code settings..." -ForegroundColor Yellow

$settingsPath = $userDataPath + "\settings.json"
$performanceSettings = @{
    "files.watcherExclude" = @{
        "**/node_modules/**" = $true
        "**/.git/objects/**" = $true
        "**/.git/subtree-cache/**" = $true
        "**/dist/**" = $true
        "**/build/**" = $true
        "**/.vscode/**" = $true
        "**/uploads/**" = $true
    }
    "search.exclude" = @{
        "**/node_modules" = $true
        "**/bower_components" = $true
        "**/*.code-search" = $true
        "**/dist" = $true
        "**/build" = $true
        "**/uploads" = $true
    }
    "files.exclude" = @{
        "**/node_modules" = $true
        "**/.git" = $true
        "**/.DS_Store" = $true
        "**/Thumbs.db" = $true
        "**/uploads" = $true
    }
    "typescript.preferences.includePackageJsonAutoImports" = "off"
    "typescript.suggest.autoImports" = $false
    "javascript.suggest.autoImports" = $false
    "editor.suggest.snippetsPreventQuickSuggestions" = $false
    "editor.acceptSuggestionOnCommitCharacter" = $false
    "editor.suggestOnTriggerCharacters" = $false
    "explorer.confirmDelete" = $false
    "explorer.confirmDragAndDrop" = $false
    "workbench.startupEditor" = "none"
    "git.autofetch" = $false
    "git.autoRepositoryDetection" = $false
    "extensions.autoUpdate" = $false
    "update.mode" = "manual"
    "telemetry.telemetryLevel" = "off"
    "workbench.settings.enableNaturalLanguageSearch" = $false
}

try {
    $currentSettings = @{}
    if (Test-Path $settingsPath) {
        $currentSettings = Get-Content $settingsPath -Raw | ConvertFrom-Json -AsHashtable -ErrorAction SilentlyContinue
        if (-not $currentSettings) { $currentSettings = @{} }
    }
    
    # Merge settings
    foreach ($key in $performanceSettings.Keys) {
        $currentSettings[$key] = $performanceSettings[$key]
    }
    
    $currentSettings | ConvertTo-Json -Depth 10 | Set-Content $settingsPath -Encoding UTF8
    Write-Host "   ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï settings.json ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢" -ForegroundColor Green
} catch {
    Write-Host "   ‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï settings.json ‡πÑ‡∏î‡πâ: $($_.Exception.Message)" -ForegroundColor Red
}

# 4. ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•
Write-Host "4. ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î..." -ForegroundColor Yellow

$extensions = code --list-extensions 2>$null
$extensionCount = if ($extensions) { $extensions.Count } else { 0 }

Write-Host "================================" -ForegroundColor Cyan
Write-Host "üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î:" -ForegroundColor Green
Write-Host "   ‚Ä¢ Extensions ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: $extensionCount" -ForegroundColor White
Write-Host "   ‚Ä¢ Cache files ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß" -ForegroundColor White  
Write-Host "   ‚Ä¢ Performance settings ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß" -ForegroundColor White
Write-Host "================================" -ForegroundColor Cyan

# 5. ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
Write-Host "üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:" -ForegroundColor Cyan
Write-Host "   1. ‡∏õ‡∏¥‡∏î extensions ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô" -ForegroundColor Yellow
Write-Host "   2. ‡πÉ‡∏ä‡πâ workspace settings ‡πÅ‡∏ó‡∏ô global settings" -ForegroundColor Yellow
Write-Host "   3. ‡∏õ‡∏¥‡∏î auto-save ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô" -ForegroundColor Yellow
Write-Host "   4. ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" -ForegroundColor Yellow
Write-Host "   5. ‡πÉ‡∏ä‡πâ .gitignore ‡πÅ‡∏•‡∏∞ .vscodeignore ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°" -ForegroundColor Yellow

Write-Host ""
Write-Host "üéâ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î VS Code ‡πÉ‡∏´‡∏°‡πà" -ForegroundColor Green
